<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://causti.co/" xml:lang="en">
  <title>causti • co</title>
  <subtitle>text</subtitle>
  <link href="https://causti.cotext/feed.xml" rel="self" />
  <link href="https://causti.co/" />
  <id>https://causti.co/</id>
  <updated>2024-07-21T00:00:00Z</updated>
  <author>
    <name>Martín Valdés de León</name>
  </author>
  <generator>Eleventy v2.0.1</generator>
  <icon>https://causti.co/assets/icons/favicon.png</icon>
  <rights>causti • co © 2024 by Martín Valdés de León, is licensed under CC BY-NC-ND 4.0</rights>
  <category term="text" />
  <entry>
    <title>Thinking about thinking</title>
    <link href="https://causti.co/text/007-thinking-about-thinking/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/007-thinking-about-thinking/" />
    <id>https://causti.co/text/007-thinking-about-thinking/</id>
    <updated>2024-07-21T00:00:00Z</updated>
    <published>2024-07-21T00:00:00Z</published>
    <summary>i&#39;ve been looking at my brain lately. it feels weird. makes me want to think. let me show you how.</summary>
    <content type="html">
      &lt;p&gt;I want to talk about how I think. Or perhaps I should say, about how I think that I think. As usual, these are ideas I&#39;ve had in my mind for a while, but that I never bothered trying to capture, write down, or formalize. Until now. I&#39;ve not done any research on this topic, so it&#39;s very likely I&#39;m just repeating something that someone else already noticed. Good for them. I don&#39;t really care.&lt;/p&gt;
&lt;p&gt;This essay is structured in two parts. First, I will introduce a model for rational thinking, and try to map back and forth from this model to some concepts that you should already be familiar with. Then, I will try to justify why I even introduce such a model in the first place by showing how it can be applied for a variety of situations.&lt;/p&gt;
&lt;p&gt;Let&#39;s get started.&lt;/p&gt;
&lt;h2&gt;Thinking as navigating a directed &lt;a href=&quot;https://causti.co/hypergraph&quot;&gt;hypergraph&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;How do you perceive the act of thinking? If you had to explain it to somebody, if you had to describe what it is exactly that you do when you&#39;re thinking, how would you do it?&lt;/p&gt;
&lt;p&gt;For me, it feels like solving a puzzle. I&#39;ve a bunch of pieces, and I&#39;m trying to make them fit with a specific purpose. Well, it turns out we can formalize this a bit if we try to express it in terms of &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_theory&quot;&gt;graph theory&lt;/a&gt;, as the process of building and subsequently navigating a directed hypergraph.&lt;/p&gt;
&lt;p&gt;We should start by defining our nodes and our edges. In the graphs we will be building, the nodes represent statements, &lt;a href=&quot;https://en.wikipedia.org/wiki/Proposition&quot;&gt;propositions&lt;/a&gt;, truths, facts, and similar &lt;a href=&quot;https://en.wikipedia.org/wiki/Truth-bearer&quot;&gt;bearing entities&lt;/a&gt;. And the edges represent operations, properties, theorems, definitions, that directionally connect multiple nodes. I&#39;m being deliberately vague here because I want to remain flexible, and also because I&#39;m too lazy to be more precise. Some examples should help to understand what I mean.&lt;/p&gt;
&lt;p&gt;The first trivial example would be the following graph that represents evaluating a mathematical expression:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://causti.co/assets/text/007-thinking-about-thinking-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here all the nodes are trivial bearing entities that represent the expressions or values themselves. And our directed edges represent the application of a given mathematical operator, which allow us to transform a given expression into a different but equivalent expression.&lt;/p&gt;
&lt;p&gt;But this is just an uncool, plain-old graph. There&#39;s nothing &amp;quot;hyper&amp;quot; about it. Let&#39;s introduce the requirement of a hypergraph with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Rolle%27s_theorem&quot;&gt;slightly more elaborate&lt;/a&gt; example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://causti.co/assets/text/007-thinking-about-thinking-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We need a hypergraph to capture the requirement that some of our edges express a relation between multiple statements on one side, and potentially multiple statements on the other. This is nothing more than adding the capability to express &lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;logical conjunction&lt;/a&gt; to our model. And before you ask, &lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_disjunction&quot;&gt;Logical disjunction&lt;/a&gt; is already trivially there. Can you see it? It&#39;s easier than you think, &lt;code&gt;(A | B) -&amp;gt; C&lt;/code&gt; is equivalent to &lt;code&gt;A -&amp;gt; C&lt;/code&gt; and &lt;code&gt;B -&amp;gt; C&lt;/code&gt;. Easy.&lt;/p&gt;
&lt;p&gt;I hope this is enough to paint the picture, because I don&#39;t want to do more examples. Rather, let&#39;s start thinking with it.&lt;/p&gt;
&lt;p&gt;Because the thing is, for a given particular instance of thinking the hypergraph itself does not yet exist (in most cases). It&#39;s something that we need to build on the spot, as we think along.&lt;/p&gt;
&lt;p&gt;To do so, we have a toolkit of edges at our disposal which we can constantly grow it by learning new shit, and how we build it will depend on the type of thinking we&#39;re trying to do. &lt;em&gt;&amp;quot;What do you mean with &#39;type of thinking&#39;?&amp;quot;&lt;/em&gt;, I hear you ask. And I&#39;m glad you did. I&#39;ll now define three distinct types of thinking, because I feel like it, and because it makes me sound smarter than I am.&lt;/p&gt;
&lt;h3&gt;Type A, or &amp;quot;Forward exploration&amp;quot;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://causti.co/assets/text/007-thinking-about-thinking-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In Type A thinking we start from a set of &amp;quot;assumption&amp;quot; statements and the goal is to start building the graph forwards to see to which new &amp;quot;conclusion&amp;quot; statements it leads us. Ideally, we have some kind of goal or direction in which we want to go. Something we&#39;re trying to achieve. But this could also be a purely exploratory exercise, which is why I&#39;ve chosen to call it this way.&lt;/p&gt;
&lt;p&gt;We&#39;ve seen an example of this already: evaluating a mathematical expression. Here the goal is to operate on our single &amp;quot;assumption&amp;quot; statement that represents an initial expression, until we reach a statement that represents an equivalent expression which we consider to be &amp;quot;irreducible&amp;quot;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Irreducibility_(mathematics)&quot;&gt;whatever that means for us&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Type B, or &amp;quot;Backward exploration&amp;quot;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://causti.co/assets/text/007-thinking-about-thinking-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Unsurprisingly, in Type B thinking we start from a set of &amp;quot;conclusion&amp;quot; statements and the goal is to start building the graph backwards to see to which new &amp;quot;assumption&amp;quot; statements it leads us.&lt;/p&gt;
&lt;p&gt;A typical example would be working backwards from a desired outcome such as moving to a different country. We start from the set of &amp;quot;conclusion&amp;quot; statements that represent our desired outcome, and we can work backwards until we have a list of &amp;quot;assumption&amp;quot; statements that we now need to go and fulfil, as well as a plan to achieve the desired outcome.&lt;/p&gt;
&lt;p&gt;Before we move to the last type, I want to note that in both Type A and Type B, we are allowed to go in the &amp;quot;opposite&amp;quot; direction, if that is of interest. We are, after all exploring. But we are trying to move in one particular direction, relative to our set of starting statements. In Type A, we will want to &amp;quot;start&amp;quot; from them, which is why I&#39;ve been calling them &amp;quot;assumptions&amp;quot;, without bothering to define what this means. Similarly, in Type B we will want to &amp;quot;arrive&amp;quot; at them, which is why I&#39;ve been calling them &amp;quot;conclusions&amp;quot;, without bothering to define what this means.&lt;/p&gt;
&lt;p&gt;Ok, lets move on.&lt;/p&gt;
&lt;h3&gt;Type C, or &amp;quot;Pathfinding&amp;quot;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://causti.co/assets/text/007-thinking-about-thinking-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We&#39;ve seen what we can do with a set of &amp;quot;assumption&amp;quot; statements, and what we can do with a set of &amp;quot;conclusion&amp;quot; statements. So the obvious question is: What can we do if we have both? We can do Type C thinking.&lt;/p&gt;
&lt;p&gt;In Type C thinking we have both a set of &amp;quot;assumption&amp;quot; statements and a set of &amp;quot;conclusion&amp;quot; statements, and the goal is to start building the graph between them until we can build a path that connects them. Or is it? We can define two different subtypes for Type C thinking.&lt;/p&gt;
&lt;h4&gt;Subtype C+&lt;/h4&gt;
&lt;p&gt;The first subtype is where the goal is to build this path. Usually there&#39;s no prescribed way to proceed, we could choose to start from the &amp;quot;assumption&amp;quot; statements and work our way forwards Type A style, we could start from the &amp;quot;conclusion&amp;quot; statements and work our way backwards Type B style, or do both and aim at meeting somewhere in the middle. The precise choice will depend on the specific statements, and the edges available in our toolbox. Instinct/gut feeling plays a big role here. Sometimes you just &amp;quot;know&amp;quot; in which direction to start exploring. It&#39;s hard to describe. All I know is that I remember not having this ability, and then having it. All I did in between was just practice.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://causti.co/assets/text/007-thinking-about-thinking-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A common strategy, in which this instinct/gut feeling plays a facilitating role, is to identify &amp;quot;good&amp;quot; intermediate statements. Statements that are not trivially equivalent to the source or destination statements, but for which you have a very good confidence that you can build a path to either. So you might as well try to build a path from this intermediate state and see if the way to the other side becomes clearer.&lt;/p&gt;
&lt;h4&gt;Subtype C-&lt;/h4&gt;
&lt;p&gt;The second subtype is where the goal is not to build a path between our &amp;quot;assumption&amp;quot; and &amp;quot;conclusion&amp;quot; statements, but rather to show that it is impossible to build such a path, no matter how much we were to try.&lt;/p&gt;
&lt;p&gt;This is not as easy as it might seem. If we only had a very limited toolbox of edges, we could somehow &amp;quot;try them all&amp;quot; in all possible combinations and show that the statements are impossible to connect. But when the toolbox of edges is potentially infinite, and even worse, when we cannot afford to restrict our claims to apply only to the edges that we already know... how could we ever be certain that it&#39;s impossible to connect them, and not that we&#39;ve simply yet to learn the one edge that will solve all of our problems?&lt;/p&gt;
&lt;p&gt;Well... What if we could build a path between the &amp;quot;assumption&amp;quot; statements and a statement that contradicts the &amp;quot;conclusion&amp;quot; statements? Or perhaps the other way around, between the &amp;quot;conclusion&amp;quot; statements and a statement that contradicts the &amp;quot;assumption&amp;quot; statements? Then it kinda works, right? Never mind that I&#39;ve not defined what &amp;quot;contradicts&amp;quot; means, just vibe with it. Because if we can show that this path exists, then either the &amp;quot;assumption&amp;quot; or the &amp;quot;conclusion&amp;quot; statements cannot must not hold if the other does. Thus, there cannot be any paths. Or more accurately: were such a path to exist, our entire model of the world would lose consistency. And this cannot be allowed to happen.&lt;/p&gt;
&lt;p&gt;You may notice that this technique also works for the Subtype C+: If we want to build a path between &amp;quot;assumption&amp;quot; and &amp;quot;conclusion&amp;quot; statements, we could show that it is possible to build a path between the opposite of the &amp;quot;conclusion&amp;quot; statement and a statement that contradicts the &amp;quot;assumption&amp;quot; statements. That also kinda works, right? Never mind that I&#39;ve not defined what &amp;quot;opposite&amp;quot; means, just vibe with it. Since we know the source statements to be true, then the &amp;quot;destination&amp;quot; statements must also hold to avoid the contradiction.&lt;/p&gt;
&lt;h2&gt;So what?&lt;/h2&gt;
&lt;p&gt;If you&#39;re in any way like me, either you&#39;ve just spent the last... I want to say 8 minutes... asking why I&#39;m wasting your time stating the obvious, or further convincing yourself that I&#39;m an idiot. Which is to say: Either what I&#39;ve just described resonates strongly with what you call &amp;quot;thinking&amp;quot;, or it doesn&#39;t.&lt;/p&gt;
&lt;p&gt;The beauty for me is that, while I&#39;ve used a couple of mathematical examples so far, this model can be applied to any other scenario where any kind of rational thinking is required. It should not be challenging to see how it can be used to express &lt;a href=&quot;https://en.wikipedia.org/wiki/Deductive_reasoning&quot;&gt;deductive reasoning&lt;/a&gt;, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain&quot;&gt;Markov process&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Chemical_synthesis&quot;&gt;chemical synthesis&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Retrosynthetic_analysis&quot;&gt;retrosynthetic analysis&lt;/a&gt;, and probably even more things that I can&#39;t think of right now or that I&#39;ve not learned about yet.&lt;/p&gt;
&lt;p&gt;And there&#39;s a couple more things that I&#39;d like to talk about before wrapping things up.&lt;/p&gt;
&lt;h3&gt;Learning as hypergraph building&lt;/h3&gt;
&lt;p&gt;I said that the hypergraph does not exist, and that the thinking process is analogous to building this graph on the spot with a specific purpose. This would be a pure &lt;a href=&quot;https://en.wikipedia.org/wiki/Ab_initio&quot;&gt;ab initio&lt;/a&gt; approach, and it&#39;s not the only approach possible. What if we already had some parts of our hypergraph pre-built?&lt;/p&gt;
&lt;p&gt;Here is important to notice that not all statements are created equal. It makes no sense to pre-build a graph for evaluating mathematical expressions, because there are an infinite number of potential mathematical expressions to evaluate. But with more limited sets of statements, it might make sense. I&#39;m sure you&#39;ve memorized your multiplication tables, or some indefinite integrals that you could just as easily calculate &lt;a href=&quot;https://en.wikipedia.org/wiki/Integration_by_parts&quot;&gt;integrating by parts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Within the terms of this model, a first order approach to learning would be just memorizing new statements and adding new edges to our toolbox, to be used in the future when needed. Which we can distinguish from a second order approach to learning, where we aim to identify which parts of the hypergraph are worth building in advance, so that we can benefit from not having to reinvent the wheel on the spot every time. This is commonly achieved via repetition, rather than by pure memorization.&lt;/p&gt;
&lt;h3&gt;Keeping a consistent model of the world&lt;/h3&gt;
&lt;p&gt;Let&#39;s go back for a moment to that &amp;quot;contradicts&amp;quot; thing. No, I don&#39;t mean the fact that I&#39;ve not defined it, you can &lt;a href=&quot;https://en.wikipedia.org/wiki/Contradiction&quot;&gt;look for definitions&lt;/a&gt; or just continue to vibe with it. I want to go back to what I said about the consistency of our model of the world. If you start to engage in what I&#39;ve just called second order learning, you will start to build an ever-growing hypergraph that will be your companion for the rest of your life. This is your model of the world. It connects all the different things you&#39;ve learned and ties them all together. This is, fundamentally, how smart you really are. You must protect it with your life, and there are two things that you cannot allow to happen.&lt;/p&gt;
&lt;p&gt;The first one is obvious enough: you must avoid learning falsehoods. If you learn falsehoods, you will arrive to incorrect conclusions while believing to be correct. Even worse, if you let this go unnoticed second order learning will propagate this falsehood through your entire model of the world, poisoning it. This takes time to identify and fix, and &lt;a href=&quot;https://causti.co/text/006-on-teaching/&quot;&gt;I&#39;ve written about it already&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second one is a bit more tricky: you must avoid inconsistencies. Ultimately, this is a corollary of the previous one, since the reason inconsistencies arise is because of falsehoods. The reason I call it out separately is because of the nature of the falsehoods involved. Inconsistencies arise not due to outright falsehoods, but rather to subtle misconceptions on otherwise correct statements such as making incorrect generalizations. Also, inconsistencies are most likely to go unnoticed for a long time. While falsehoods will lead to incorrect conclusions immediately, an inconsistency will not be noticed until you learn a conflicting statement sometime later. And then you&#39;ll have a problem: You&#39;ll need to judge if the new statement that you&#39;re trying to add to your model of the world might be a falsehood, or if you need to reevaluate your model of the world because something in there cannot be quite true. You might not even notice the inconsistency and learn the conflicting statement without thinking twice about it, only to find yourself absolutely lost and confused when you try to use your model of the world at a later point in time.&lt;/p&gt;
&lt;p&gt;This is for me the complete model of learning, that I might be tempted to call third order learning: You memorize new statements. You add new edges to your toolbox. You build your hypergraph in advance, and you keep going until you can be sure that the new statements are absolutely in agreement with the rest of your model of the world. If any conflicts are identified, you resolve them on the spot. I don&#39;t remember the exact example, but I do remember the situation (multiple, in fact) where I did not allow a professor to move forwards with their lecture because they&#39;ve just delivered a statement that, were I to take it as-is, would introduce an inconsistency in my model of the world. I could not let that happen. If I did, it would mean that I&#39;d effectively be leaving that class knowing less than when I came in. Come the fuck on.&lt;/p&gt;
&lt;h3&gt;By any other name&lt;/h3&gt;
&lt;p&gt;If we take another look at Type C thinking within a mathematical context, can you think of another name for it? You&#39;re trying to show, by applying a set of rules and principles, that you can use a given set of assumptions to guarantee a given conclusion. You&#39;re building a &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematical_proof&quot;&gt;mathematical proof&lt;/a&gt;. And when we applied the technique used for Subtype C- on Subtype C+, that was &lt;a href=&quot;https://en.wikipedia.org/wiki/Proof_by_contradiction&quot;&gt;proof by contradiction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The observation here should be that building a mathematical proof is not a unique type of thinking. It&#39;s the same Type C thinking that you&#39;d use when solving any other kind of problem. If you can write a proof, you can argue a case in front of a judge. You just gotta make sure your model of the legal world is good enough. You&#39;re missing the facts. But you&#39;re not missing the process.&lt;/p&gt;
&lt;h3&gt;Thinking about code&lt;/h3&gt;
&lt;p&gt;The final example I want to give of Type C thinking is how I think when writing code, and the reason why I love Haskell. I see writing code as trying to go from an initial set of types that codify my program&#39;s input to a final set of types that codify my program&#39;s output. The model of the world is made out of the different elements the programming language and its libraries give you to manipulate data and transform it or combine it from some given types into some other types. What in the context of logical thinking would be a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypothetical_syllogism&quot;&gt;hypothetical syllogism&lt;/a&gt;, we just call &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_composition_(computer_science)&quot;&gt;function composition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All I have to do is find a path from my input types to my output types. If I can find this path, I solved the problem. And as with all Type C thinking, instinct plays a big role. Instinct will tell you that certain intermediate representations are likely to be useful. So I&#39;ll define those types as well. And instinct will also guide you in learning to identify the ways in which different types are or are not equivalent, and in the cases where they are not, what additional data is required to transform one into the other.&lt;/p&gt;
&lt;p&gt;In a graph where the nodes are types are the edges are functions, I can use Type C thinking to write the entire skeleton of a program just at the type level, with a minimal implementation limited to glue code just to make sure all the pieces fit together but without any actual business logic. And if this type-checks, I&#39;m almost certain that the code will just work once I implement it. Any errors past this point are usually me failing to properly understand the problem, and actually solving an entirely different problem.&lt;/p&gt;
&lt;p&gt;I could show you how to put this into practice, but I believe that&#39;s better suited for a video than an article. For the moment, this will have to do. I&#39;ve shared what I wanted to share. Now you think about it.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Thoughts on teaching</title>
    <link href="https://causti.co/text/006-on-teaching/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/006-on-teaching/" />
    <id>https://causti.co/text/006-on-teaching/</id>
    <updated>2024-04-26T00:00:00Z</updated>
    <published>2024-04-26T00:00:00Z</published>
    <summary>i would be so happy, if i were a teacher. but i&#39;d be broke. somehow what i do now is more important to society.</summary>
    <content type="html">
      &lt;p&gt;I guess most people don&#39;t know, but a for a few years before moving to Germany I was a member of the &lt;a href=&quot;https://www.partidosocialista.org.ar/&quot;&gt;Argentinean Socialist Party&lt;/a&gt;. There&#39;s some fun stories of &lt;em&gt;light political vandalism&lt;/em&gt; to be told, but I&#39;ll save those for another time. The main thing I did as a party member was provide &lt;a href=&quot;https://en.wikipedia.org/wiki/Remedial_education&quot;&gt;remedial education&lt;/a&gt; to whomever would show up at the local party office every Saturday afternoon, which would be a mixture of children currently at elementary or high school, as well as older people going through &lt;a href=&quot;https://en.wikipedia.org/wiki/Adult_education&quot;&gt;adult education&lt;/a&gt;, mostly high-school.&lt;/p&gt;
&lt;p&gt;It was usually me and one or two more tutors, and we would pick up whichever topic was needed: mathematics, physics, chemistry, history, grammar, you name it. And we&#39;re talking remedial education, so these were not students who were cruising through their classes, rather the opposite. They were usually struggling, and their families were not able to afford a private tutor. Needless to say, I have absolutely no training as an educator, but I was willing to admit my ignorance and use it as a starting point to learn.&lt;/p&gt;
&lt;h2&gt;There are no stupid students&lt;/h2&gt;
&lt;p&gt;My main take-away was that there is no such a thing as a stupid student. There is such a thing, however, as a horrible teacher. The one thing that every single person I tutored was in dire need for, was time. Having someone sit next to them, engage with them as they solve a problem, ask them to guide you through their actions and though process, and take the time to understand how they see things. And that was mostly all I had to do, offer them my time.&lt;/p&gt;
&lt;p&gt;By sitting next to them, I noticed an interesting thing: These people rarely made any &lt;em&gt;mistakes&lt;/em&gt;. By this I mean things like &amp;quot;forgetting&amp;quot; to carry over a minus sign from a previous line or silly things like that. These were universally scarce, and all you had to do was point them out. Once you did, they were as obvious to them as they were to me.&lt;/p&gt;
&lt;p&gt;But they were still getting the answers to their exercises wrong.&lt;/p&gt;
&lt;p&gt;Not because they were making mistakes, but because they were operating logically and rationally based on a model of the world that was no longer sound. They had allowed a single falsehood to ingrain itself into their model of the world, and none of their teachers was able to notice and correct this in time.&lt;/p&gt;
&lt;p&gt;That became my job. Sit next to them, let them work through a problem, and whenever I spotted something that was off, start working backwards until I could finally arrive to this single falsehood and correct it. And then, it&#39;s as if you had suddenly removed stone that was jamming a gear mechanism. Everything else suddenly clicks into place, and all of a sudden they are getting all the exercises right (And if you&#39;re thinking &amp;quot;Hey, that sounds an awful lot like debugging code&amp;quot; then you&#39;ll most likely enjoy my upcoming article on debugging).&lt;/p&gt;
&lt;p&gt;Imagine how frustrated you would feel if you did everything you thought was right, and still arrived at an incorrect result, and got absolutely no feedback as to why or how to address it, only that you got it wrong and you suck.&lt;/p&gt;
&lt;h2&gt;Work is not that different&lt;/h2&gt;
&lt;p&gt;At this point in my career, I&#39;m mostly paid to write and talk to people. And some of the people I have to talk to are wrong. Now, here&#39;s a funny thing about people for all the non-humans out there reading this: People &lt;strong&gt;really do not like&lt;/strong&gt; being told they are wrong. Luckily, many of the things we just mentioned are still valid in this context.&lt;/p&gt;
&lt;p&gt;People who are wrong, for the most part, are not making &lt;em&gt;mistakes&lt;/em&gt; when they arrive to a wrong conclusion. They are acting logically and rationally, but there&#39;s something in their model of the world that is off. There are a couple of differences that we need to account for, however.&lt;/p&gt;
&lt;p&gt;First, unlike students, these people are not in the room with me &lt;em&gt;to be taught&lt;/em&gt;. In the best case they are looking for advice as peers, and in the worst case they think I&#39;m there to try and sell them something. So even if I can identify the falsehood in their world model, I need to guide them into noticing it themselves, rather than pointing it out directly. Otherwise, they&#39;ll most likely reject it. I&#39;d say that this feels more like therapy, but my understanding of therapy is based purely on &lt;a href=&quot;https://tvtropes.org/pmwiki/pmwiki.php/Main/HollywoodPsych&quot;&gt;US fiction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;they might actually be right&lt;/strong&gt;. When a student makes a mistake, there&#39;s usually no room for debate. But in this case, I always have to entertain the notion that it might be me who is wrong. I&#39;m not &lt;em&gt;that&lt;/em&gt; full of myself. This is also inherently a good thing: It&#39;s how I grow. I am my worst, most relentless critic, and this helps keep myself in check.&lt;/p&gt;
&lt;p&gt;A framework I&#39;ve found incredibly helpful in both helping me explore the possibility that I might be wrong, as well as helping me identify the potential falsehood in someone&#39;s world model, is to honestly ask myself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What do they know that I don&#39;t know?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What vital piece of information am I missing, that where I to add it to my own world model, would cause me to arrive to the same conclusion as they are?&lt;/p&gt;
&lt;p&gt;Work backwards from their apparently wrong conclusion, applying logic and reason, and reverse-engineer a path to the knowledge that you might be lacking. If you&#39;re only going to take one thing away from this article, this should be it.&lt;/p&gt;
&lt;p&gt;There&#39;s another silly anecdote that comes to mind about the multiple choice exams I had to take for my introductory &lt;a href=&quot;http://www.mate.cbc.uba.ar/27/teoricas.htm&quot;&gt;Algebra&lt;/a&gt; and &lt;a href=&quot;http://www.mate.cbc.uba.ar/66/teoricas.htm&quot;&gt;Calculus&lt;/a&gt; courses, but that too will have to wait for another time.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>How does this website work</title>
    <link href="https://causti.co/text/005-website-stack/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/005-website-stack/" />
    <id>https://causti.co/text/005-website-stack/</id>
    <updated>2024-04-19T00:00:00Z</updated>
    <published>2024-04-19T00:00:00Z</published>
    <summary>it&#39;s the personal website bottle episode! but i&#39;ll try to keep it interesting. maybe you learn something. maybe you get inspired. we need more personal websites.</summary>
    <content type="html">
      &lt;p&gt;It&#39;s the obligatory &amp;quot;how does this website work&amp;quot; blog post!&lt;/p&gt;
&lt;p&gt;I&#39;ll try to keep this one on the less-refined side of things, but let&#39;s see. First off, I assume you already checked the &lt;a href=&quot;https://causti.co/about/&quot;&gt;about&lt;/a&gt; page, which gives a very quick overview of why this place even exists in the first place.&lt;/p&gt;
&lt;p&gt;So I wanted to have a personal website. I&#39;ve had the idea on my mind for a while, and mostly kept postponing it to avoid having to deal with the design-side of things. I&#39;ve never been on the artistic side so the kind of things I can come up with on my own is quite limited, but after looking at some older software UIs for inspiration I decided to just get something out there, so I could move on to actually writing content.&lt;/p&gt;
&lt;h2&gt;html/css&lt;/h2&gt;
&lt;p&gt;I did the first design directly in HTML and CSS. And if HTML had some kind of native way of code reuse/includes, I might&#39;ve been tempted to just stick to writing HTML for my content. But soon enough I found myself wanting to test more than a single page at a time, and that meant I had to create multiple HTML files, and at that point making a change meant having to make that same change across multiple files.&lt;/p&gt;
&lt;p&gt;A few decisions I made at this stage: 1/ No 3rd party resources, 2/ Don&#39;t do anything that would require a cookie banner, 3/ Avoid JS as much as possible, 4/ Don&#39;t bother with older browsers (yes, this includes IE11).&lt;/p&gt;
&lt;h2&gt;11ty&lt;/h2&gt;
&lt;p&gt;Since I wanted to keep things as simple as possible, a &amp;quot;traditional&amp;quot; n-tier stack was absolutely out of the question. The alternative was to use a static site generator. After reviewing the most popular choices, I settled for &lt;a href=&quot;https://github.com/11ty/eleventy/&quot;&gt;11ty&lt;/a&gt; as it appeared to be the least opinionated one of the bunch, allowing me to start with an empty directory and slowly bring content and complexity in as needed. I followed my traditional approach of reading the entire docs to figure out what it can and cannot do before getting to adapting my static content to &lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot;&gt;nunjucks&lt;/a&gt;. I chose nunjucks simply because it was the default templating language used in the documentation.&lt;/p&gt;
&lt;p&gt;Lastly, I decided to manually number content items by adopting the following naming convention: &lt;code&gt;###-desired-content-url.ext&lt;/code&gt;, and to manually provide content dates via Front Matter data, rather than use the mechanisms provided by 11ty based on either file system or Git dates.&lt;/p&gt;
&lt;h3&gt;Folder structure&lt;/h3&gt;
&lt;pre class=&quot;shiki rose-pine-dawn tree&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span&gt;website/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;├─ dist/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;├─ src/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   ├─ _data/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   ├─ _includes/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   ├─ about/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   ├─ assets/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   │  ├─ fonts/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   │  ├─ icons/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   │  ├─ images/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   │  ├─ styles/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   ├─ photo/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   │  ├─ _drafts/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   ├─ recs/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;   ├─ text/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span&gt;      ├─ _drafts/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Sass&lt;/h3&gt;
&lt;p&gt;I migrated all the styles from CSS to SCSS, since writing plain CSS is extremely repetitive. I&#39;m using the &lt;a href=&quot;https://github.com/kentaroi/eleventy-sass&quot;&gt;eleventy-sass&lt;/a&gt; plugin with no further configuration. Setting the &lt;code&gt;ELEVENTY_ENV&lt;/code&gt; &lt;a href=&quot;https://causti.co/text/002-environment-variables/&quot;&gt;environment variable&lt;/a&gt; to a non-production value will generate uncompressed CSS with source maps, which is nice.&lt;/p&gt;
&lt;h3&gt;Custom collections&lt;/h3&gt;
&lt;p&gt;My first challenge was implementing the &amp;quot;group by month+year&amp;quot; feature I had mocked up for the &lt;a href=&quot;https://causti.co/text/&quot;&gt;text&lt;/a&gt; section. Lucky for us, 11ty lets you do a lot of pre-processing to prepare the right data structures you need in your templates using JavaScript, so I used &lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt; to do the grouping for me:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; _&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;lodash&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; function&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;  eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;addCollection&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;textByMonth&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;collection&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    const&lt;/span&gt;&lt;span style=&quot;color:#D7827E;font-style:italic&quot;&gt; pad&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; number&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;00&quot;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; +&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; number&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;toString&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;())&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;slice&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; month&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;JAN&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;FEB&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;MAR&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;APR&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;MAY&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;JUN&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;JUL&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;AUG&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;SEP&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;OCT&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;NOV&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;DEC&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    return&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; _&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;chain&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;collection&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;getFilteredByTag&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;reverse&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;())&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      .&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;groupBy&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        let&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; date&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; text&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;page&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;date&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        return&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; `&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;month&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;date&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;getUTCMonth&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;()]&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}${&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;pad&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;date&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;getFullYear&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;())&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      .&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;toPairs&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      .&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code is fragile: 1/ It depends on the collection being sorted by creation date in ascending order (before we reverse it). 2/ It depends on traversal order as specified by ECMAScript. But since I&#39;m in full control of the environment where this code runs (either my laptop or the CD environment), I&#39;m ok with this. The alternative would be to group by a key that is sortable, sort the resulting array by this key, then map this key back to a human-readable value. No reason to make things more complex than they need to be.&lt;/p&gt;
&lt;h3&gt;EXIF data&lt;/h3&gt;
&lt;p&gt;The next thing I wanted to do was automatically extract information like shutter speed, focal length, etc. from photos automatically from their &lt;a href=&quot;https://en.wikipedia.org/wiki/Exif&quot;&gt;EXIF data&lt;/a&gt;. Lucky for me, 11ty&#39;s documentation on &lt;a href=&quot;https://www.11ty.dev/docs/data-custom/&quot;&gt;custom data file formats&lt;/a&gt; describes this exact use-case. I picked a more up-to-date EXIF library, and used lodash again to help me get the data I needed. I also had to do some tweaking along the way to get things just right for me. Here&#39;s the final result:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; ExifReader&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;exifreader&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; _&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;lodash&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; function&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;  eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;addDataExtension&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;jpg&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;    parser&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; async&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; file&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      const&lt;/span&gt;&lt;span style=&quot;color:#D7827E;font-style:italic&quot;&gt; exifDate&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; value&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; date&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; time&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; ]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; value&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        return&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; new&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; Date&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;date&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;replaceAll&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&#39;:&#39;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &#39;-&#39;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;T&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;time&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;.000Z`&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      };&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; tags&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; await&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; ExifReader&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;load&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;file&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; config&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;height&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;Image Height.value&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;width&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;Image Width.value&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;make&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;Make.description&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;model&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;Model.description&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;exposure&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;ExposureTime.description&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;aperture&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;FNumber.description&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;iso&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;ISOSpeedRatings.value&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;focalLength&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;FocalLength.description&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;lens&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;Lens.description&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;date&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;DateTime.description&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;originalDate&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;DateTimeOriginal.description&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      };&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; altModels&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        &quot;EOS DIGITAL REBEL XSi&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;450D&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      };&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      let&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; _&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;mapValues&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;config&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; tag&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; _&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;tags&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; tag&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;))&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;      //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Canon repeats the Make in the Model&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;model&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; &amp;#x26;&amp;#x26;&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;make&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; &amp;#x26;&amp;#x26;&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;model&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;startsWith&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;make&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;        exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;model&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;model&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;slice&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;make&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; +&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; 1&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;      //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Use alternative Models&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;model&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; &amp;#x26;&amp;#x26;&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;model&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; in&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; altModels&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;        exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;model&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; altModels&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;model&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;      //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Remove trailing `f/` to get fstop value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;aperture&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;        exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;fstop&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;aperture&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;slice&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;f/&quot;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      else&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;        exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;fstop&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; undefined&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;      //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Parse exif dates&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;date&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;date&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; exifDate&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;date&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;originalDate&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;originalDate&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; exifDate&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exif&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;originalDate&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      return&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; exif&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; };&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    },&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;    //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Pass file path to `parser` rather than file contents&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;    read&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, all my input images are &lt;code&gt;*.jpg&lt;/code&gt;. I&#39;ll update this if that ever changes.&lt;/p&gt;
&lt;h3&gt;Responsive images&lt;/h3&gt;
&lt;p&gt;Keeping on the photos (and images in general), I also wanted to automatically convert all my images to &lt;a href=&quot;https://en.wikipedia.org/wiki/WebP&quot;&gt;WebP&lt;/a&gt; and provide images of different sizes to optimize bandwidth use for my visitors. Again, 11ty has you covered out of the box with the &lt;a href=&quot;https://www.11ty.dev/docs/plugins/image/&quot;&gt;Image plugin&lt;/a&gt;. However, this plugin appears designed to be used for embedding static content, so I had to adapt it to do the processing as part of the custom data pipeline, and provide my own shortcode:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; path&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;node:path&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; Image&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;@11ty/eleventy-img&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; function&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;  eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;addDataExtension&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;jpg&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;    parser&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; async&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; file&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;      //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Generate mobile-optimized images for the photos&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      let&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; responsive&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; undefined&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;file&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;startsWith&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;./src/photo/&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)) &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; stats&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; await&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; Image&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;file&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;          //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; widths generated by&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;          //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; https://github.com/peter-neumann-dev/responsive-image-linter&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;          widths&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;256&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;880&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;1220&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;1490&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;1710&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;1905&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;2048&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;auto&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;          formats&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;webp&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;          urlPath&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;/assets/photo/&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;          outputDir&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;./dist/assets/photo/&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;          filenameFormat&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; src&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; width&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; format&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;            const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; extension&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; path&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;extname&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;            const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; name&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; path&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;basename&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;src&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; extension&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;        &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;            return&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; `&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;width&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;w.&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;format&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;          }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;        }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;        responsive&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; stats&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;webp&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      return&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; responsive&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; };&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    },&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;    //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Pass file path to `parser` rather than file contents&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;    read&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;  eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;addShortcode&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;responsive&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; alt&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; sizes&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; largest&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; responsive&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;responsive&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; -&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; 1&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; srcset&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; responsive&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;size&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; size&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;srcset&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;join&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    return&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; `&amp;#x3C;img src=&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;largest&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;url&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot; srcset=&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;srcset&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot; sizes=&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;sizes&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot; width=&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;largest&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;width&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot; height=&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;largest&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;height&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot; alt=&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;alt&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few more things to call-out: I&#39;m using my own paths here, and I also chose to do away with the &amp;quot;unique identifiers&amp;quot; the plugin generates by default, in favor of predictable filenames instead. I&#39;d also like to add a huge shout-out to the &lt;a href=&quot;https://github.com/peter-neumann-dev/responsive-image-linter&quot;&gt;Responsive Image Linter&lt;/a&gt; Chrome extension, which automatically resizes your webpage and provides a recommendation for both image resolutions and &lt;code&gt;&amp;lt;img sizes=&amp;quot;...&amp;quot; /&amp;gt;&lt;/code&gt; configuration.&lt;/p&gt;
&lt;p&gt;In my actual code both of these snippets are merged into a single processing pipeline. I&#39;ve split them here in for convenience in case anyone wants only one part of the functionality.&lt;/p&gt;
&lt;h3&gt;Better external links&lt;/h3&gt;
&lt;p&gt;I wanted to automatically make external links open in a new window by having &lt;code&gt;target=_blank&lt;/code&gt; added to them. And while at it, I also wanted to add &lt;code&gt;rel=&amp;quot;noopener noreferrer&amp;quot;&lt;/code&gt;. I built this as a filter using regular expressions for the parsing. I know, I know, HTML is not a regular language. But I don&#39;t need to parse HTML. I just need to find opening &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags, on HTML that ultimately I control, so this does the job perfectly well.&lt;/p&gt;
&lt;p&gt;I don&#39;t try to do anything smarter than that. If the attributes are not set, they will be set. If they are set, they will be left alone.&lt;/p&gt;
&lt;p&gt;This snippet needs to know where the website is hosted, so we get that information from the &lt;code&gt;homepage&lt;/code&gt; field in the &lt;code&gt;package.json&lt;/code&gt; file. Cute, right?&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; pkg&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;./package.json&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; function&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; linkStartTag&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; /&amp;#x3C;a href=&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;([&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;^&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;([&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;^&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;ig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; targetAttr&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; /target=/&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;ig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; relAttr&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; /rel=/&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;ig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; origin&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; new&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; URL&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;pkg&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;homepage&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;  eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;addFilter&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;safeLinks&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; value&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    return&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; value&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;replaceAll&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;linkStartTag&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;oldValue&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; linkUrl&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; attrs&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      let&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; url&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; new&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; URL&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;linkUrl&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; origin&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;url&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;origin&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; !==&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; origin&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        return&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; `&amp;#x3C;a href=&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;linkUrl&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;targetAttr&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;attrs&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; ?&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; ` target=&quot;_blank&quot;`&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; :&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}${&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;relAttr&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;attrs&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; ?&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; ` rel=&quot;noopener noreferrer&quot;`&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; :&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;attrs&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      else&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        return&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; oldValue&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Drafts&lt;/h3&gt;
&lt;p&gt;Somewhere in the 11ty docs they suggest using a &lt;code&gt;_drafts&lt;/code&gt; folder, and I liked the idea. At the same time, I wanted to be able to test my drafts, so I configured 11ty to only ignore drafts in production, using the same logic as the that eleventy-sass plugin uses (I just copied their code here).&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; function&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;  //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Environment-sensitive configuration&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; ELEVENTY_ENV&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; process&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;env&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;  //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Use same logic as `eleventy-sass` for now&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;ELEVENTY_ENV&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; ===&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; undefined&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; ||&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;production&quot;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;startsWith&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;ELEVENTY_ENV&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)) &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;    //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Ignore `_drafts`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;    eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;ignores&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;**/_drafts/**&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve created folders for the different content categories in my site (text, photo, etc.), and I have a &lt;code&gt;_drafts&lt;/code&gt; folder inside each of these folders. Since I&#39;m already using folder data files for each of my content categories, I enhanced the computed data to automatically remove &lt;code&gt;_drafts&lt;/code&gt; from the generated content path, so that I can fully test draft content with the same URLs as I would have in production.&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;  eleventyComputed&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;    permalink&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; data&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;page&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;filePathStem&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;includes&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;/_drafts/&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)) &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        return&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; `&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;page&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;filePathStem&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;replace&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;/_drafts/&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;/&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;/`&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Feature flags&lt;/h3&gt;
&lt;p&gt;Actually, I left a couple of lines out of that &amp;quot;Environment-sensitive configuration&amp;quot; snippet. Here&#39;s how it really looks like:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; function&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;  //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Environment-sensitive configuration&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; ELEVENTY_ENV&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; process&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;env&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;  //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Use same logic as `eleventy-sass` for now&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;ELEVENTY_ENV&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; ===&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; undefined&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; ||&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;production&quot;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;startsWith&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;ELEVENTY_ENV&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)) &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;    //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Ignore `_drafts`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;    eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;ignores&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;**/_drafts/**&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; else&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;    //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Feature-flag for experimental features&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;    eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;addGlobalData&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;experimental&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; true&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;m using this opportunity to conditionally set feature flags (at the moment just one, the &lt;code&gt;experimental&lt;/code&gt; flag). Just like &lt;code&gt;_drafts&lt;/code&gt; lets me work on content without publishing it, the &lt;code&gt;experimental&lt;/code&gt; flag lets me work on entire features without publishing them:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-handlebars&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;{%- if experimental %}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#9893A5&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color:#9893A5&quot;&gt;&gt;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;my next amazing feature&lt;/span&gt;&lt;span style=&quot;color:#9893A5&quot;&gt;&amp;#x3C;/&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;h1&lt;/span&gt;&lt;span style=&quot;color:#9893A5&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;{%- endif %}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way I can be in the middle of working on a new feature, and still be able to publish a hotfix to production without having to create a new branch or stash my work in progress.&lt;/p&gt;
&lt;h3&gt;Syntax Highlighting&lt;/h3&gt;
&lt;p&gt;As I was writing this, I needed to add some syntax highlighting support for the code samples. I tried the &lt;a href=&quot;https://www.11ty.dev/docs/plugins/syntaxhighlight/&quot;&gt;official plugin&lt;/a&gt; which uses &lt;a href=&quot;https://prismjs.com/&quot;&gt;PrismJS&lt;/a&gt;. It worked, but it needed its CSS to be loaded externally. PrismJS itself felt clunky and outdated, and I could not find a theme I liked, so I started looking for alternatives.&lt;/p&gt;
&lt;p&gt;Luckily for me, things in 11ty are relatively straightforward. Markdown itself is processed by &lt;a href=&quot;https://github.com/markdown-it/markdown-it&quot;&gt;markdown-it&lt;/a&gt;, and this component can be &lt;a href=&quot;https://www.11ty.dev/docs/languages/markdown/&quot;&gt;easily enhanced and/or reconfigured&lt;/a&gt; if needed.&lt;/p&gt;
&lt;p&gt;With that in mind, I settled for &lt;a href=&quot;https://shiki.style/&quot;&gt;Shiki&lt;/a&gt; as a better alternative. This highlighter comes with its own &lt;a href=&quot;https://shiki.style/packages/markdown-it&quot;&gt;markdown-it plugin&lt;/a&gt;, and has a &lt;a href=&quot;https://shiki.style/guide/transformers&quot;&gt;nice API&lt;/a&gt; for further enhancing the generated output.&lt;/p&gt;
&lt;p&gt;There are a couple of things to consider though: I&#39;ve been working with CommonJS modules thus far, because I&#39;m an old fart, but Shiki ship as an ECMAScript module only. That means using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import&quot;&gt;dynamic import&lt;/a&gt; syntax, which loads the module asynchronously and returns a &lt;code&gt;Promise&lt;/code&gt; that resolves to the module. This is not a problem, except 11ty does not support async functions as arguments for &lt;code&gt;eleventyConfig.amendLibrary&lt;/code&gt;. The &lt;a href=&quot;https://github.com/11ty/eleventy-plugin-syntaxhighlight/issues/32#issuecomment-1410641845&quot;&gt;current workaround&lt;/a&gt;, until 11ty V3 releases with support for async configuration functions, is to use the &lt;code&gt;eleventy.before&lt;/code&gt; event, as event handlers can be async.&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; _Shiki&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; import&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;@shikijs/markdown-it&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; function&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;  //&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; Workaround until amendLibrary supports async functions&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;  eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;on&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;eleventy.before&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; async&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; ()&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#D7827E;font-style:italic&quot;&gt; default&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; Shiki&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; await&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; _Shiki&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; metaUnquoted&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; /&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;([&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;&#92;w&#92;-_&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;(?!&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)([&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;^&#92;s&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;ig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; metaQuoted&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; /&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;([&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;&#92;w&#92;-_&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;=&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;([&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;^&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;/&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;ig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; syntaxHighlighter&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; await&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; Shiki&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;      theme&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;rose-pine-dawn&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;      transformers&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;        pre&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;node&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;          let&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; rawMeta&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; this&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;options&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;meta&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;__raw&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;          if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;rawMeta&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;startsWith&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;[&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;&amp;#x26;&amp;#x26;&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; rawMeta&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;endsWith&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;            rawMeta&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; rawMeta&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;slice&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; -&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;          const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; matches&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;            ...&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;rawMeta&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;matchAll&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;metaUnquoted&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;            ...&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;rawMeta&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;matchAll&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;metaQuoted&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;          ]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;([&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;oldValue&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; key&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; value&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; value&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;          for&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; value&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; of&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; matches&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;            if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; ===&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;class&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;              this&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;addClassToHast&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;node&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; value&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;            }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; else&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;              if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;startsWith&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;data-&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)) &lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; key&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;slice&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;data-&quot;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;              node&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;properties&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;`data-&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;key&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;] &lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; value&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;            }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;          }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;          delete&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; node&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;properties&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;tabindex&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;    eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;amendLibrary&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;md&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; mdLib&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; mdLib&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;use&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;syntaxHighlighter&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;))&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I took the liberty of providing a basic transformer that removes the &lt;code&gt;tabindex&lt;/code&gt; property from the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag (Is there a reason to want to make these available to tab navigation that I&#39;m not getting?), as well as allowing additional classes and attributes to be defined by adding them next to the code block fence, like so:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn line-numbers diff&quot; style=&quot;background-color:#faf4ed;color:#575279&quot; data-start-line=&quot;53&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;```&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;js [class=&quot;line-numbers diff&quot; start-line=53]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593;font-style:italic&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#9893A5;font-style:italic&quot;&gt; (... code here ...)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;```&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can inspect the source of this page and see this working for the code block above.&lt;/p&gt;
&lt;h3&gt;Better Indent&lt;/h3&gt;
&lt;p&gt;I&#39;ve been using Nunjuck&#39;s &lt;a href=&quot;https://mozilla.github.io/nunjucks/templating.html#indent&quot;&gt;indent&lt;/a&gt; filter to ensure that content included in layouts has the right indentation in the overall generated HTML. Sadly, I had to make an exception for code blocks, as &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; render their content including whitespace.&lt;/p&gt;
&lt;p&gt;Anyway, I wrote my own indent filter that skips &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; blocks:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; function&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; preStartTag&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; /&amp;#x3C;pre&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;([&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;^&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;ig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; preEndTag&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; /&amp;#x3C;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;&#92;/&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;pre&gt;/&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;ig&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;  eleventyConfig&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;addFilter&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;betterIndent&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; spaces&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;first&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; ...&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;rest&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; value&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;&#92;n&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    let&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; newValue&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; first&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    let&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; insidePre&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; preStartTag&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;first&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    for&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;let&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; line&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; of&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; rest&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;preStartTag&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;line&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)) &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;        insidePre&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; true&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; else&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;insidePre&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;line&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; `&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;repeat&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;spaces&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;line&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;preEndTag&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;line&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)) &lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;insidePre&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; false&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;      newValue&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; +=&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; `&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;&#92;n&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;line&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;    return&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; newValue&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;trimEnd&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;I thought it would be cool to show the currently deployed version by displaying information about the current commit. I&#39;m just using &lt;code&gt;child_process&lt;/code&gt; to call the Git CLI directly and providing what I need as a global data file:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; util&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&#39;node:util&#39;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; exec&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; util&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;promisify&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;node:child_process&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exec&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; async&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; ()&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; stdout&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; await&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; exec&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;git log -1 --format=%H%n%h%n%cI%n%s&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;hash&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; shortHash&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; date&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; subject&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; stdout&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;&#92;n&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;  return&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;    hash&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;    shortHash&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;    date&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; new&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; Date&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;date&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;    subject&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  };&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I thought it would be even cooler to show a git-powered revision history, so I did it all over again as a folder data file:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; util&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&#39;node:util&#39;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; exec&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; util&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;promisify&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;node:child_process&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;exec&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;    history&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; async&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; data&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;page&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;fileSlug&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; !==&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;text&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; stdout&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; await&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; exec&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;`git log --format=%H%n%h%n%cI%n%s%n &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;page&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;inputPath&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; history&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; stdout&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;trimEnd&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;&#92;n&#92;n&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt;logEntry&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;          const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;hash&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; shortHash&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; date&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; subject&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; logEntry&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;&#92;n&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;          return&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;            hash&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;            shortHash&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;            date&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; new&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; Date&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;date&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;            subject&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;          };&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;        }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        return&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; history&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Reading time&lt;/h3&gt;
&lt;p&gt;I wanted to provide an indicator of length for the text content, so I used the &lt;a href=&quot;https://github.com/ngryman/reading-time/&quot;&gt;reading-time&lt;/a&gt; library to add a word count and estimated reading time. I really wanted to get as precise a word count as possible, so I chose to re-load the Markdown and use that as the starting point (after skipping any Front Matter), rather than process the Markdown content already rendered into HTML and try to remove the tags:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; readFile&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&#39;node:fs/promises&#39;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; readingTime&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; require&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&#39;reading-time&#39;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;exports&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;    stats&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; async&lt;/span&gt;&lt;span style=&quot;color:#907AA9;font-style:italic&quot;&gt; data&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&gt;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;      if&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;page&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;fileSlug&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; !==&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;text&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; contents&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; await&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; readFile&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;page&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;inputPath&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt; encoding&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &#39;utf8&#39;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; }&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        const&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; fragments&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; contents&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;split&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;---&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;&#92;n&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        const&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; words&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; minutes&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; }&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; =&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; readingTime&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;fragments&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;fragments&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; -&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; 1&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;])&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#286983&quot;&gt;        return&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;          words&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;          minutes&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt; Math&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt;ceil&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color:#575279;font-style:italic&quot;&gt;minutes&lt;/span&gt;&lt;span style=&quot;color:#575279&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;        };&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;      }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#575279&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally I would be able to configure &lt;code&gt;markdown-it&lt;/code&gt; to perform plain-text rendering with some additional tweaking such as completely ignoring code blocks. I tried going through the documentation but could not find a suitable example to use as a starting point, I guess I&#39;ll need to look at some plugins or similar and see if I can figure it out. For the time-being this will have to do.&lt;/p&gt;
&lt;h2&gt;Continuous Deployment&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;build-and-deploy&lt;/code&gt; workflow handles continuous deployment to GitHub Pages, with a twist: The repository that hosts the actual GitHub Pages is not this repository, it&#39;s &lt;a href=&quot;https://github.com/causti-co/causti-co.github.io&quot;&gt;causti-co/causti-co.github.io&lt;/a&gt;. So the deploy step is actually just pushing the latest static content into this repository, using &lt;a href=&quot;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys#deploy-keys&quot;&gt;deploy keys&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; build and deploy&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;jobs&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;  deploy&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;    runs-on&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; ubuntu-latest&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;    needs&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; build&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;    steps&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    -&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt; uses&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; actions/checkout@v4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;      with&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;        repository&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; causti-co/causti-co.github.io&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;        ssh-key&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &#39;${{ secrets.DEPLOY_KEY }}&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    -&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt; uses&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; actions/download-artifact@v4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;      with&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;        name&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; dist-bundle&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    -&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt; name&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; git config&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;      run&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#286983&quot;&gt; |&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        git config --global user.name &quot;${{ github.event.head_commit.author.name }}&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt;        git config --global user.email &quot;${{ github.event.head_commit.author.email }}&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    -&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt; run&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; git add .&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    -&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt; run&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; git commit -am &quot;${{ github.event.head_commit.message }}&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#56949F&quot;&gt;      continue-on-error&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#D7827E&quot;&gt; true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    -&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt; run&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; git push&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use the event data provided by GitHub actions at &lt;code&gt;github.event.head_commit&lt;/code&gt; to reuse the information from the latest commit of this repo when pushing to the deployment repository. Also, we want the &lt;code&gt;git commit&lt;/code&gt; step to tolerate errors: This step will fail when the working tree is empty (e.g., when there&#39;s nothing to commit). This just means that whatever we changed had no effect on the generated content. This is not an error, and we do not want the workflow to fail and get paged.&lt;/p&gt;
&lt;p&gt;So, why am I deploying to a different repository just to use GitHub Pages over there and not here? Because I really did not want to use &lt;code&gt;docs/&lt;/code&gt; for GitHub Pages, and the only way I&#39;d be happy with the static content sitting at the root of a repository is by having a dedicated repository just for the static content.&lt;/p&gt;
&lt;p&gt;Overall I&#39;m happy with this approach, and from the point of view of this repository, we&#39;re 100% agnostic of GitHub Pages which makes it easier for me to change hosting providers in the future.&lt;/p&gt;
&lt;h2&gt;What&#39;s next?&lt;/h2&gt;
&lt;p&gt;Well, I now have a personal website. The first priority will be to keep it fresh with content. I&#39;ve a &lt;a href=&quot;https://github.com/causti-co/website/blob/main/docs/ideas.md&quot;&gt;backlog of content ideas&lt;/a&gt; (and as a matter of fact, it was &lt;a href=&quot;https://github.com/causti-co/website/tree/26b720d50f9fea29dfd2bb140d6dd8e55a6c7b6e&quot;&gt;the first thing I did in this repository&lt;/a&gt;, even before starting with the design), that I&#39;ll be working through, and thanks to the drafts I can decouple authoring from publishing.&lt;/p&gt;
&lt;p&gt;I&#39;ll try to keep to one text and one photo per week, and see how I feel with that rhythm.&lt;/p&gt;
&lt;p&gt;Meanwhile, I&#39;ve also a &lt;a href=&quot;https://github.com/causti-co/website/blob/main/docs/todo.md&quot;&gt;backlog of website features&lt;/a&gt; to work on whenever I get the urge to ship something before my next publishing date comes up. Let&#39;s see. So far, I&#39;ve been having a blast. I hope you stay along for the ride.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>We need to talk about: SLAs</title>
    <link href="https://causti.co/text/004-sla/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/004-sla/" />
    <id>https://causti.co/text/004-sla/</id>
    <updated>2024-04-12T00:00:00Z</updated>
    <published>2024-04-12T00:00:00Z</published>
    <summary>at night, i hear them scream. —&quot;please!&quot; —&quot;i just want to check that box!&quot; —&quot;why won&#39;t you let me check that box?!&quot; we need to talk.</summary>
    <content type="html">
      &lt;p&gt;This is going to be a rant about corporate life. I&#39;ve been working with enterprise customers in one way or another for over 10 years, and in that time &lt;strong&gt;I&#39;ve not had a single meaningful discussion about Service Level Agreements (SLAs)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, don&#39;t get me wrong: I&#39;ve had plenty of discussions about SLAs. But I can safely say that all of them were a complete waste of my time, for the simple reason that the people who wanted to talk to me about SLAs had no clue what SLAs were or what purpose they serve. Worse yet, ever single time someone wanted to talk to me about SLAs, they were convinced that SLAs were synonymous with &amp;quot;guaranteed minimum availability&amp;quot;.&lt;/p&gt;
&lt;p&gt;Utter nonsense.&lt;/p&gt;
&lt;p&gt;So, same as last time, let&#39;s set the record straight once and for all.&lt;/p&gt;
&lt;h2&gt;You probably don&#39;t need SLAs&lt;/h2&gt;
&lt;p&gt;So what &lt;em&gt;are&lt;/em&gt; SLAs, anyway?&lt;/p&gt;
&lt;p&gt;SLAs are contracts. Legally binding documents, carefully drafted by your friendly corporate lawyers. Don&#39;t let the technical terminology included delude you, SLAs are not the domain of engineers, they are the domain of lawyers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary 1.&lt;/strong&gt; If your SLA does not read like it was written by lawyers, it&#39;s probably just words someone put up on a website and not a real SLA.&lt;/p&gt;
&lt;p&gt;So, if SLAs are contracts and are legally binding, whom do they legally bind, and to what? Broadly speaking, all SLAs are about the same thing: They bind a service provider into not charging you money for a service that was not delivered, or that was not delivered up to some agreed specification. They provide a clear description of the service, define how its quality will be measured, and establish some quality thresholds that needs to be met to avoid having to provide monetary compensation.&lt;/p&gt;
&lt;p&gt;That is all there is to it. It sounds like a good thing, and it is. But let me illustrate why in practice they are not as relevant as you might expect them to be, from the perspective of a technology consumer.&lt;/p&gt;
&lt;p&gt;Say you buy a ticket for a concert. If the artist cancels the tour, you&#39;d be entitled to a refund. That&#39;s the SLA. Now, say you had deliberately planned your entire holidays around this concert. The only reason you&#39;re traveling is to attend this concert, and without it your entire trip no longer makes sense. Would the artist be responsible for any of this? &lt;strong&gt;Hell no&lt;/strong&gt;. All that is on you. The artist made sure not to take your money for the service they failed to provide, but whatever else you built on top of this service, and the potential loss that you&#39;re now exposed, is entirely your responsibility.&lt;/p&gt;
&lt;p&gt;That&#39;s the issue with SLAs in the real world.&lt;/p&gt;
&lt;p&gt;If you have a $1000/hour business process running on top of a $10/hour server, the most an SLA will get you is your $10/hour back if the server is down. Can you afford to lose that $990/hour? If the answer is &amp;quot;no&amp;quot;, then you want to look at building a resilient architecture that can tolerate server failures, not at the server&#39;s SLA.&lt;/p&gt;
&lt;p&gt;And when you build this architecture, you now have a clear cost ceiling: Whatever you come up with, if it were to cost more than $990/hour, then you&#39;d be better off letting your process go down and taking the hit. Between that number and your new cost is your potential business case.&lt;/p&gt;
&lt;h2&gt;When &lt;em&gt;do&lt;/em&gt; you need SLAs?&lt;/h2&gt;
&lt;p&gt;From my experience, as an engineer you&#39;ll only care about SLAs when you&#39;re the one writing them. That is, when your team owns the service that&#39;s charging others money, and you need to offer them some terms that establish the quality you expect to deliver, and under which circumstances you will give them their money back.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary 2.&lt;/strong&gt; If you&#39;re being asked to write an SLA with no input or support from legal, it&#39;s probably just words someone wants to put up on a website and not a real SLA.&lt;/p&gt;
&lt;p&gt;So, what do you do in this case? Well, I can tell you what you don&#39;t do: Math based on theoretical availabilities or other SLAs.&lt;/p&gt;
&lt;p&gt;In a nutshell: Define some indicators of service quality you want to measure and measure them. Once you&#39;ve collected enough data to understand what your baseline performance for these indicators is, you can define your objectives. From your objectives, you can derive your failure budget and set-up proactive alerting.&lt;/p&gt;
&lt;p&gt;I could go into details, but I&#39;ll be repeating what others have already written down for me in Google&#39;s &lt;a href=&quot;https://sre.google/workbook/table-of-contents/&quot;&gt;Site Reliability Workbook&lt;/a&gt; Chapters 2 and 5. Once you have Service Level Objectives (SLOs) you feel confident in, talk to legal.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>I was hacked!</title>
    <link href="https://causti.co/text/003-subdomain-takeover/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/003-subdomain-takeover/" />
    <id>https://causti.co/text/003-subdomain-takeover/</id>
    <updated>2024-04-07T00:00:00Z</updated>
    <published>2024-04-07T00:00:00Z</published>
    <summary>i got lazy. i got lucky. and for a few hours, my house had a side-door leading to an online casino. come take a look. the answer will not surprise you.</summary>
    <content type="html">
      &lt;p&gt;Today I woke up with an email from the &amp;quot;Google Search Console Team&amp;quot; informing me that a new owner had been added for &lt;code&gt;http://ftp.causti.co/&lt;/code&gt;. &lt;strong&gt;Not cool.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;WTF!?&lt;/h2&gt;
&lt;p&gt;First things first: I recognize the subdomain. It was provided by default, configured as a &lt;code&gt;CNAME&lt;/code&gt; record pointing to &lt;code&gt;causti.co&lt;/code&gt;, and I never gave it a second thought. &lt;strong&gt;This will turn out to be my first mistake.&lt;/strong&gt; I immediately assume the worse and go check my DNS access rights and configuration. Everything looks good. No problems with my credentials, and the configuration looks good. I take the hint and enable 2FA, then keep digging.&lt;/p&gt;
&lt;p&gt;Next I check with the Google Search Console, and after adding this specific URL as a property (which I can do since I own the TLD), I find the user entry created by the attacker. I can also see how they managed to verify ownership of their domain without having access to my DNS: Google lets you perform domain ownership verification by adding a &lt;code&gt;&amp;lt;meta name=&amp;quot;google-site-verification&amp;quot; content=&amp;quot;...&amp;quot; /&amp;gt;&lt;/code&gt; tag with a unique value.&lt;/p&gt;
&lt;p&gt;With that clue, I check &lt;code&gt;http://ftp.causti.co/&lt;/code&gt; with &lt;code&gt;wget&lt;/code&gt; (maybe I should&#39;ve done this in the first place...) and indeed, the attacker is hosting some scam website from that subdomain, so of course they are able to inject any HTML they want. I can delete their user from the Google Search Console, but they can just keep adding themselves until I fix the issue.&lt;/p&gt;
&lt;h2&gt;How!?&lt;/h2&gt;
&lt;p&gt;So the attacker is serving content from one of my subdomains, but they did not compromise my DNS. Let&#39;s dig deeper. This website is hosted in GitHub Pages using an &lt;a href=&quot;https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain&quot;&gt;apex domain&lt;/a&gt;. This means &lt;code&gt;causti.co&lt;/code&gt; resolves to an &lt;code&gt;A&lt;/code&gt; record pointing to GitHub IPs. And if &lt;code&gt;ftp.causti.co&lt;/code&gt; resolves to a &lt;code&gt;CNAME&lt;/code&gt; pointing to &lt;code&gt;causti.co&lt;/code&gt;, then it will also resolve to the same GitHub IPs. Indeed, I check the headers of the content coming from &lt;code&gt;http://ftp.causti.co/&lt;/code&gt;, and it&#39;s being served by GitHub.&lt;/p&gt;
&lt;p&gt;Now at least I understand what is going on. I immediately remove the DNS record for &lt;code&gt;ftp.causti.co&lt;/code&gt;, and confirm there are no other similar unused subdomains that could be taken over in a similar way.&lt;/p&gt;
&lt;p&gt;Searching for &amp;quot;github pages subdomain takeover&amp;quot; quickly lands me on the &lt;a href=&quot;https://github.com/EdOverflow/can-i-take-over-xyz/issues/68&quot;&gt;can-i-take-over-xyz&lt;/a&gt; repository, discussing this exact kind of takeover. Here&#39;s what caught me off-guard: It seems that there are (at least) two separate domain ownership verification processes for GitHub, and I was foolish enough to assume they were related. They are not.&lt;/p&gt;
&lt;p&gt;When I first created this website, I created a &lt;a href=&quot;https://github.com/causti-co&quot;&gt;GitHub Organization&lt;/a&gt;, and while setting it up I had to &lt;a href=&quot;https://docs.github.com/en/organizations/managing-organization-settings/verifying-or-approving-a-domain-for-your-organization&quot;&gt;verify ownership&lt;/a&gt; of the &lt;code&gt;causti.co&lt;/code&gt; domain. What I completely missed was the &lt;a href=&quot;https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages#verifying-a-domain-for-your-organization-site&quot;&gt;second domain verification process exclusive to GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you don&#39;t do this, any GitHub user can configure their repository to use one of your subdomains as a custom domain for their GitHub Pages, and GitHub will not perform any domain ownership verification.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It was the combination of both mistakes that made the takeover possible.&lt;/p&gt;
&lt;h2&gt;Welp&lt;/h2&gt;
&lt;p&gt;In retrospect, I&#39;d say I got lucky. The attacker was greedy and wanted to get Google Search insights, which triggered the email that warned me something was off. If they hadn&#39;t, then I probably would not have noticed for Lord knows how long.&lt;/p&gt;
&lt;p&gt;The overall lesson is clear: &lt;em&gt;It&#39;s always DNS&lt;/em&gt;. I &lt;strong&gt;knew&lt;/strong&gt; about that unused subdomain, I just falsely assumed it to be innocuous. I&#39;ll not be making that mistake in the future again.&lt;/p&gt;
&lt;p&gt;As for GitHub, I&#39;m still honestly surprised there&#39;s domain ownership verification by default when setting up a custom domain for GitHub Pages. That would be the definitive way to keep this from ever happening again. But until they take any actions, it&#39;s on ourselves to keep our stuff in order.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>We need to talk about: Environment variables</title>
    <link href="https://causti.co/text/002-environment-variables/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/002-environment-variables/" />
    <id>https://causti.co/text/002-environment-variables/</id>
    <updated>2024-04-05T00:00:00Z</updated>
    <published>2024-04-05T00:00:00Z</published>
    <summary>do you ever think about the environment? what it is, and also, what it isn&#39;t. convenience is good. convenience can be dangerous. we need to talk.</summary>
    <content type="html">
      &lt;p&gt;I&#39;ve been delivering different versions of this rant over the past decade to whomever was there to hear. And seeing as people are still not getting the point, as exemplified by projects like &lt;a href=&quot;https://github.com/dotenvx/dotenvx&quot;&gt;@dotenvx/dotenvx&lt;/a&gt;, &lt;a href=&quot;https://github.com/joho/godotenv&quot;&gt;joho/godotenv&lt;/a&gt;, or &lt;a href=&quot;https://github.com/theskumar/python-dotenv&quot;&gt;theskumar/python-dotenv&lt;/a&gt;, etc., it looks like it&#39;s time I get this down in written form.&lt;/p&gt;
&lt;p&gt;Then at least I can start linking people to here rather than having to repeat myself again. And again. And again.&lt;/p&gt;
&lt;h2 class=&quot;funky&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.env&lt;/code&gt; files are an implementation detail of &lt;em&gt;your&lt;/em&gt; environment. &lt;strong&gt;Nothing&lt;/strong&gt; in your project should care or know that &lt;code&gt;.env&lt;/code&gt; files exist. If you want to use &lt;code&gt;.env&lt;/code&gt; files, then you need to: 1/ Add &lt;code&gt;.env&lt;/code&gt; to your global &lt;code&gt;~/.gitignore&lt;/code&gt; file, and &lt;strong&gt;never&lt;/strong&gt; to a project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file. 2/ Configure &lt;strong&gt;your environment&lt;/strong&gt;, and &lt;strong&gt;not your project&lt;/strong&gt;, to load &lt;code&gt;.env&lt;/code&gt; files (for example, using &lt;a href=&quot;https://github.com/hyperupcall/autoenv&quot;&gt;hyperupcall/autoenv&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Variables of the Environment&lt;/h2&gt;
&lt;p&gt;As a developer, you get exposed to environment variables out of necessity. They are not usually a thing that you need to care about until the first time you encounter a tool or program that is sensitive to the environment, or that expects to get configured via environment variables. So you start digging. You see that your shell seems to have a set of variables. You can list them with &lt;code&gt;printenv&lt;/code&gt;. You recognize some of this stuff. You remember how some tools wanted you to add stuff to this &lt;code&gt;PATH&lt;/code&gt; variable, and you see the stuff you added. Other stuff seems alien, and you have no clue where it&#39;s coming from. You can print a variable with &lt;code&gt;echo $VARIABLE&lt;/code&gt;, so you figure you can use them in your shell scripts. You learn you can set new ones, and even pass additional variables to your shell scripts when you run them: &lt;code&gt;NEW_VAR=hello ./myscript.sh&lt;/code&gt;. You learn that these variables are accessible to all programs you run from your shell, not just other shell scripts. You learn that this whole &amp;quot;environment variables&amp;quot; thing is actually quite old, and supported across all major platforms.&lt;/p&gt;
&lt;p&gt;And before you know it, you have a new tool in your toolbox.&lt;/p&gt;
&lt;h2&gt;Prepare for trouble...&lt;/h2&gt;
&lt;p&gt;So you use it. You want your programs to be cool programs that can be configured via environment variables. You&#39;ve seen others do it: that&#39;s how you learned about environment variables in the first place. You learn about &lt;a href=&quot;https://12factor.net/config&quot;&gt;The Twelve-Factor App&lt;/a&gt;, and how &amp;quot;The twelve-factor app stores config in environment variables&amp;quot;, and you start passing all kinds of configuration to your application via environment variables.&lt;/p&gt;
&lt;p&gt;At this point I need to stop what I&#39;m doing and tell you: Please don&#39;t. Configuration files are a good thing. They exist for a good reason. If you expect different environments to place their configuration files at different locations, then it makes sense to configure &lt;em&gt;the path from where to load configuration files&lt;/em&gt; via environment variables. But I don&#39;t have time for that right now, there&#39;s more important things I want to get to.&lt;/p&gt;
&lt;p&gt;Regardless of whether it makes sense or not, the point is that by now you&#39;re writing applications that need to get configured via environment variables. So you need to set some environment variables. So far you&#39;ve seen how to pass values manually, and how to set them in your current shell, but you don&#39;t want to be doing this every time you&#39;re writing some code. There has to be a way to set environment variables once in a single place, and have them be available every time you open a new shell. And sure, there is, and you&#39;ve done this already: your shell&#39;s rc file (&lt;code&gt;~/.bashrc&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt;, etc.). But this feels... &lt;em&gt;wrong&lt;/em&gt;... right? It feels weird having to go and edit a global file with project-specific configuration. And if you ever need to provide two projects with different values for the same variable, you&#39;re shit out of luck.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There has to be a better way...&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;...and make it double&lt;/h2&gt;
&lt;p&gt;So you learn about &lt;code&gt;.env&lt;/code&gt; files. You find some convenient library for your either language of choice or JavaScript, add a couple of lines to your project, and that&#39;s it. It loads your &lt;code&gt;.env&lt;/code&gt; files and the rest just works. Don&#39;t forget to add your &lt;code&gt;.env&lt;/code&gt; to your project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file, you don&#39;t want to be committing any secrets, now, do you?&lt;/p&gt;
&lt;p&gt;Let&#39;s quickly recap what you just did: 1/ You externalized your application&#39;s configuration to environment variables. 2/ You&#39;ve introduced a convenient way to load a configuration file into your environment variables. Do you think you&#39;ll be strong enough to restrain yourself from using &lt;code&gt;.env&lt;/code&gt; files in prod? You won&#39;t. The alternative would most likely feel clunky in comparison. Why would you store your configuration somewhere else?&lt;/p&gt;
&lt;p&gt;Even if &lt;em&gt;you&lt;/em&gt; don&#39;t use a &lt;code&gt;.env&lt;/code&gt; file in production, you&#39;re going to want to be &lt;strong&gt;sure&lt;/strong&gt; that there is no &lt;code&gt;.env&lt;/code&gt; file there. Otherwise, you might end up in a situation where you&#39;re properly providing a value via environment variables, only to have this value overwritten by a &lt;code&gt;.env&lt;/code&gt; file that should not be there. And by this point it should be quite clear that what you&#39;ve done is reinvent configuration files, except you&#39;re restricting yourself to key-value pairs, and forcing your configuration through the &amp;quot;API&amp;quot; of environment variables for no good reason.&lt;/p&gt;
&lt;p&gt;In the process, you&#39;ve made your application no longer environment-agnostic. You&#39;ve made it aware of the specific details of your development environment, and potentially carried that into other environments.&lt;/p&gt;
&lt;h2&gt;Doing it the right way&lt;/h2&gt;
&lt;p&gt;I&#39;ve already mentioned that there are some inherent issues with (ab)using environment variables to configure your applications, and will pick this up again once we&#39;re done here, but let&#39;s not question that for the moment, and assume that you&#39;re using environment variables correctly, and still want a way to conveniently configure your local environment on a per-project level. &lt;code&gt;.env&lt;/code&gt; files can be great at that. You just gotta approach it correctly.&lt;/p&gt;
&lt;p&gt;This is going to be an implementation detail of your environment. Whatever you do, your application should not have to know or care.&lt;/p&gt;
&lt;h3&gt;Add &lt;code&gt;.env&lt;/code&gt; to your global &lt;code&gt;~/.gitignore&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;You don&#39;t want to commit &lt;code&gt;.env&lt;/code&gt; files, but you also don&#39;t want to configure this on a per-project basis. Ignore them globally and forget about them.&lt;/p&gt;
&lt;h3&gt;Source &lt;code&gt;.env&lt;/code&gt; files in your shell&lt;/h3&gt;
&lt;p&gt;You can load &lt;code&gt;.env&lt;/code&gt; files by sourcing them in your shell (&lt;code&gt;source .env&lt;/code&gt;). Even better, you can automate this process with the appropriate tooling. I use &lt;a href=&quot;https://github.com/hyperupcall/autoenv&quot;&gt;hyperupcall/autoenv&lt;/a&gt; to automatically load &lt;code&gt;.env&lt;/code&gt; files when changing directories.&lt;/p&gt;
&lt;p&gt;Congratulations! You&#39;re now using environment variables correctly. You have a convenient way of configuring your local environment, that does not propagate to other environments. If you want to provide values on a different environment, you&#39;ll need to follow that environment&#39;s best practices.&lt;/p&gt;
&lt;h2&gt;Please don&#39;t&lt;/h2&gt;
&lt;p&gt;While I have you here, a couple more things.&lt;/p&gt;
&lt;p&gt;You do know that environment variables are global to your process, right? Say you&#39;re a node developer. There&#39;s nothing that keeps code in &lt;code&gt;node_modules/nonsuspicious-library/index.js&lt;/code&gt; from peeking at &lt;code&gt;process.env.AWS_ACCESS_KEY_SECRET&lt;/code&gt;. You don&#39;t need to grant it permission. You won&#39;t get a notification. It just can. I assume you&#39;ve already considered this attack vector. Right?&lt;/p&gt;
&lt;p&gt;Also, you do know there&#39;s a world out there besides key=value pairs, right? If you find yourself doing stuff like &lt;code&gt;GALACTUS_SERVICE_HOSTNAME&lt;/code&gt;, &lt;code&gt;GALACTUS_SERVICE_PORT&lt;/code&gt;, &lt;code&gt;GALACTUS_SERVICE_VERSION&lt;/code&gt;, etc., you probably want to stop what you&#39;re doing and go define a configuration file.&lt;/p&gt;
&lt;p&gt;And please, &lt;strong&gt;please&lt;/strong&gt; don&#39;t do stuff like this. This is real code from a project that shall remain nameless:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;@unfortunate/developer&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;4.2.0&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;scripts&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;serve:dev&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;ELEVENTY_ENV=development eleventy --serve&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;serve:prod&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;ELEVENTY_ENV=production eleventy --serve&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;ELEVENTY_ENV=production eleventy&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;build:dev&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;ELEVENTY_ENV=development eleventy&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know this stuff looks super convenient, helpful, intuitive, innocent, you name it. But trust me, when you&#39;re running &lt;code&gt;ELEVENTY_ENV=development npm run build&lt;/code&gt; and you can&#39;t for the life of you figure out why &lt;code&gt;console.log(process.env.ELEVENTY_ENV)&lt;/code&gt; prints &lt;code&gt;&#39;production&#39;&lt;/code&gt;, you&#39;re going to want to have a word with whomever wrote those npm scripts.&lt;/p&gt;
&lt;h2&gt;Postscript&lt;/h2&gt;
&lt;p&gt;Environment variables are fine, as long as they are the right tool for the job. But for anything even slightly more complex than just a few strings or numbers, you really want to be looking at configuration files. It&#39;s 2024, let&#39;s be honest: you&#39;re containerizing and deploying this onto Kubernetes. You do know that Kubernetes lets you inject configuration and secrets into your containers, not only as environment variables, but also as files, right? You have no excuses here.&lt;/p&gt;
&lt;p&gt;Rant over.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Logarithmic age</title>
    <link href="https://causti.co/text/001-logarithmic-age/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/001-logarithmic-age/" />
    <id>https://causti.co/text/001-logarithmic-age/</id>
    <updated>2024-04-01T00:00:00Z</updated>
    <published>2024-04-01T00:00:00Z</published>
    <summary>time might be linear, but our subjective value of it isn&#39;t. how could life look if we measured things differently to reflect this? have I ever told you about logarithmic age?</summary>
    <content type="html">
      &lt;p&gt;Have I ever told you about &lt;a href=&quot;https://en.wikipedia.org/wiki/Logarithm&quot;&gt;logarithmic&lt;/a&gt; age? I don&#39;t remember exactly when I first came up with this idea, but the realization was that not all consecutive 365-day period in your life are comparably significant. Of course, we speak from the bias of being our current age, but I think we can all agree that the amount of shit you get done during days 7305 and 7670 of your life is significantly more than what you get done between days 2922 and 3287.&lt;/p&gt;
&lt;p&gt;Logarithmic age fixes this. Logarithm to the base 2, to be precise. Here&#39;s how it works: You take your boring old linear age, you calculate its &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_logarithm&quot;&gt;binary logarithm&lt;/a&gt;, and you take the &lt;a href=&quot;https://en.wikipedia.org/wiki/Floor_and_ceiling_functions&quot;&gt;ceiling&lt;/a&gt; of that number. That&#39;s your new age. Me? I recently turned 6. This year will last twice as long as the previous one. Which was twice as long as the previous one. &lt;em&gt;Which was twice as long...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What do these new numbers mean? We can take a look.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;log&lt;sub&gt;2&lt;/sub&gt; Age&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0 - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1 - 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2 - 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4 - 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8 - 16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16 - 32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;32 - 64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;64 - 128&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The first two years are the same, but then it starts to get interesting. Year two, you star to socialize. Year three is your early childhood. Year four is the core of your youth. Year five you&#39;re a young adult. Year six is the major part of your life. And finally year seven is when you retire and die. Every year you have twice as much time to accomplish things as the previous one. Every year puts you twice as close to the end of your life as the previous one.&lt;/p&gt;
&lt;p&gt;Me? I recently turned 6. Fuck.&lt;/p&gt;

    </content>
  </entry>
</feed>