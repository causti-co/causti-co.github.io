<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://causti.co/" xml:lang="en">
  <title>causti • co</title>
  <subtitle>text</subtitle>
  <link href="https://causti.cotext/feed.xml" rel="self" />
  <link href="https://causti.co/" />
  <id>https://causti.co/</id>
  <updated>2024-04-12T00:00:00Z</updated>
  <author>
    <name>Martín Valdés de León</name>
  </author>
  <generator>Eleventy v2.0.1</generator>
  <icon>https://causti.co/assets/icons/favicon.png</icon>
  <rights>causti • co © 2024 by Martín Valdés de León, is licensed under CC BY-NC-ND 4.0</rights>
  <category term="text" />
  <entry>
    <title>We need to talk about: SLAs</title>
    <link href="https://causti.co/text/004-sla/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/004-sla/" />
    <id>https://causti.co/text/004-sla/</id>
    <updated>2024-04-12T00:00:00Z</updated>
    <published>2024-04-12T00:00:00Z</published>
    <summary>at night, i hear them scream. —&quot;please!&quot; —&quot;i just want to check that box!&quot; —&quot;why won&#39;t you let me check that box?!&quot; we need to talk.</summary>
    <content type="html">
      &lt;p&gt;This is going to be a rant about corporate life. I&#39;ve been working with enterprise customers in one way or another for over 10 years, and in that time &lt;strong&gt;I&#39;ve not had a single meaningful discussion about Service Level Agreements (SLAs)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, don&#39;t get me wrong: I&#39;ve had plenty of discussions about SLAs. But I can safely say that all of them were a complete waste of my time, for the simple reason that the people who wanted to talk to me about SLAs had no clue what SLAs were or what purpose they serve. Worse yet, ever single time someone wanted to talk to me about SLAs, they were convinced that SLAs were synonymous with &amp;quot;guaranteed minimum availability&amp;quot;.&lt;/p&gt;
&lt;p&gt;Utter nonsense.&lt;/p&gt;
&lt;p&gt;So, same as last time, let&#39;s set the record straight once and for all.&lt;/p&gt;
&lt;h2&gt;You probably don&#39;t need SLAs&lt;/h2&gt;
&lt;p&gt;So what &lt;em&gt;are&lt;/em&gt; SLAs, anyway?&lt;/p&gt;
&lt;p&gt;SLAs are contracts. Legally binding documents, carefully drafted by your friendly corporate lawyers. Don&#39;t let the technical terminology included delude you, SLAs are not the domain of engineers, they are the domain of lawyers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary 1.&lt;/strong&gt; If your SLA does not read like it was written by lawyers, it&#39;s probably just words someone put up on a website and not a real SLA.&lt;/p&gt;
&lt;p&gt;So, if SLAs are contracts and are legally binding, whom do they legally bind, and to what? Broadly speaking, all SLAs are about the same thing: They bind a service provider into not charging you money for a service that was not delivered, or that was not delivered up to some agreed specification. They provide a clear description of the service, define how its quality will be measured, and establish some quality thresholds that needs to be met to avoid having to provide monetary compensation.&lt;/p&gt;
&lt;p&gt;That is all there is to it. It sounds like a good thing, and it is. But let me illustrate why in practice they are not as relevant as you might expect them to be, from the perspective of a technology consumer.&lt;/p&gt;
&lt;p&gt;Say you buy a ticket for a concert. If the artist cancels the tour, you&#39;d be entitled to a refund. That&#39;s the SLA. Now, say you had deliberately planned your entire holidays around this concert. The only reason you&#39;re traveling is to attend this concert, and without it your entire trip no longer makes sense. Would the artist be responsible for any of this? &lt;strong&gt;Hell no&lt;/strong&gt;. All that is on you. The artist made sure not to take your money for the service they failed to provide, but whatever else you built on top of this service, and the potential loss that you&#39;re now exposed, is entirely your responsibility.&lt;/p&gt;
&lt;p&gt;That&#39;s the issue with SLAs in the real world.&lt;/p&gt;
&lt;p&gt;If you have a $1000/hour business process running on top of a $10/hour server, the most an SLA will get you is your $10/hour back if the server is down. Can you afford to lose that $990/hour? If the answer is &amp;quot;no&amp;quot;, then you want to look at building a resilient architecture that can tolerate server failures, not at the server&#39;s SLA.&lt;/p&gt;
&lt;p&gt;And when you build this architecture, you now have a clear cost ceiling: Whatever you come up with, if it were to cost more than $990/hour, then you&#39;d be better off letting your process go down and taking the hit. Between that number and your new cost is your potential business case.&lt;/p&gt;
&lt;h2&gt;When &lt;em&gt;do&lt;/em&gt; you need SLAs?&lt;/h2&gt;
&lt;p&gt;From my experience, as an engineer you&#39;ll only care about SLAs when you&#39;re the one writing them. That is, when your team owns the service that&#39;s charging others money, and you need to offer them some terms that establish the quality you expect to deliver, and under which circumstances you will give them their money back.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary 2.&lt;/strong&gt; If you&#39;re being asked to write an SLA with no input or support from legal, it&#39;s probably just words someone wants to put up on a website and not a real SLA.&lt;/p&gt;
&lt;p&gt;So, what do you do in this case? Well, I can tell you what you don&#39;t do: Math based on theoretical availabilities or other SLAs.&lt;/p&gt;
&lt;p&gt;In a nutshell: Define some indicators of service quality you want to measure and measure them. Once you&#39;ve collected enough data to understand what your baseline performance for these indicators is, you can define your objectives. From your objectives, you can derive your failure budget and set-up proactive alerting.&lt;/p&gt;
&lt;p&gt;I could go into details, but I&#39;ll be repeating what others have already written down for me in Google&#39;s &lt;a href=&quot;https://sre.google/workbook/table-of-contents/&quot;&gt;Site Reliability Workbook&lt;/a&gt; Chapters 2 and 5. Once you have Service Level Objectives (SLOs) you feel confident in, talk to legal.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>I was hacked!</title>
    <link href="https://causti.co/text/003-subdomain-takeover/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/003-subdomain-takeover/" />
    <id>https://causti.co/text/003-subdomain-takeover/</id>
    <updated>2024-04-07T00:00:00Z</updated>
    <published>2024-04-07T00:00:00Z</published>
    <summary>i got lazy. i got lucky. and for a few hours, my house had a side-door leading to an online casino. come take a look. the answer will not surprise you.</summary>
    <content type="html">
      &lt;p&gt;Today I woke up with an email from the &amp;quot;Google Search Console Team&amp;quot; informing me that a new owner had been added for &lt;code&gt;http://ftp.causti.co/&lt;/code&gt;. &lt;strong&gt;Not cool.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;WTF!?&lt;/h2&gt;
&lt;p&gt;First things first: I recognize the subdomain. It was provided by default, configured as a &lt;code&gt;CNAME&lt;/code&gt; record pointing to &lt;code&gt;causti.co&lt;/code&gt;, and I never gave it a second thought. &lt;strong&gt;This will turn out to be my first mistake.&lt;/strong&gt; I immediately assume the worse and go check my DNS access rights and configuration. Everything looks good. No problems with my credentials, and the configuration looks good. I take the hint and enable 2FA, then keep digging.&lt;/p&gt;
&lt;p&gt;Next I check with the Google Search Console, and after adding this specific URL as a property (which I can do since I own the TLD), I find the user entry created by the attacker. I can also see how they managed to verify ownership of their domain without having access to my DNS: Google lets you perform domain ownership verification by adding a &lt;code&gt;&amp;lt;meta name=&amp;quot;google-site-verification&amp;quot; content=&amp;quot;...&amp;quot; /&amp;gt;&lt;/code&gt; tag with a unique value.&lt;/p&gt;
&lt;p&gt;With that clue, I check &lt;code&gt;http://ftp.causti.co/&lt;/code&gt; with &lt;code&gt;wget&lt;/code&gt; (maybe I should&#39;ve done this in the first place...) and indeed, the attacker is hosting some scam website from that subdomain, so of course they are able to inject any HTML they want. I can delete their user from the Google Search Console, but they can just keep adding themselves until I fix the issue.&lt;/p&gt;
&lt;h2&gt;How!?&lt;/h2&gt;
&lt;p&gt;So the attacker is serving content from one of my subdomains, but they did not compromise my DNS. Let&#39;s dig deeper. This website is hosted in GitHub Pages using an &lt;a href=&quot;https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain&quot;&gt;apex domain&lt;/a&gt;. This means &lt;code&gt;causti.co&lt;/code&gt; resolves to an &lt;code&gt;A&lt;/code&gt; record pointing to GitHub IPs. And if &lt;code&gt;ftp.causti.co&lt;/code&gt; resolves to a &lt;code&gt;CNAME&lt;/code&gt; pointing to &lt;code&gt;causti.co&lt;/code&gt;, then it will also resolve to the same GitHub IPs. Indeed, I check the headers of the content coming from &lt;code&gt;http://ftp.causti.co/&lt;/code&gt;, and it&#39;s being served by GitHub.&lt;/p&gt;
&lt;p&gt;Now at least I understand what is going on. I immediately remove the DNS record for &lt;code&gt;ftp.causti.co&lt;/code&gt;, and confirm there are no other similar unused subdomains that could be taken over in a similar way.&lt;/p&gt;
&lt;p&gt;Searching for &amp;quot;github pages subdomain takeover&amp;quot; quickly lands me on the &lt;a href=&quot;https://github.com/EdOverflow/can-i-take-over-xyz/issues/68&quot;&gt;can-i-take-over-xyz&lt;/a&gt; repository, discussing this exact kind of takeover. Here&#39;s what caught me off-guard: It seems that there are (at least) two separate domain ownership verification processes for GitHub, and I was foolish enough to assume they were related. They are not.&lt;/p&gt;
&lt;p&gt;When I first created this website, I created a &lt;a href=&quot;https://github.com/causti-co&quot;&gt;GitHub Organization&lt;/a&gt;, and while setting it up I had to &lt;a href=&quot;https://docs.github.com/en/organizations/managing-organization-settings/verifying-or-approving-a-domain-for-your-organization&quot;&gt;verify ownership&lt;/a&gt; of the &lt;code&gt;causti.co&lt;/code&gt; domain. What I completely missed was the &lt;a href=&quot;https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages#verifying-a-domain-for-your-organization-site&quot;&gt;second domain verification process exclusive to GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you don&#39;t do this, any GitHub user can configure their repository to use one of your subdomains as a custom domain for their GitHub Pages, and GitHub will not perform any domain ownership verification.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It was the combination of both mistakes that made the takeover possible.&lt;/p&gt;
&lt;h2&gt;Welp&lt;/h2&gt;
&lt;p&gt;In retrospect, I&#39;d say I got lucky. The attacker was greedy and wanted to get Google Search insights, which triggered the email that warned me something was off. If they hadn&#39;t, then I probably would not have noticed for Lord knows how long.&lt;/p&gt;
&lt;p&gt;The overall lesson is clear: &lt;em&gt;It&#39;s always DNS&lt;/em&gt;. I &lt;strong&gt;knew&lt;/strong&gt; about that unused subdomain, I just falsely assumed it to be innocuous. I&#39;ll not be making that mistake in the future again.&lt;/p&gt;
&lt;p&gt;As for GitHub, I&#39;m still honestly surprised there&#39;s domain ownership verification by default when setting up a custom domain for GitHub Pages. That would be the definitive way to keep this from ever happening again. But until they take any actions, it&#39;s on ourselves to keep our stuff in order.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>We need to talk about: Environment variables</title>
    <link href="https://causti.co/text/002-environment-variables/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/002-environment-variables/" />
    <id>https://causti.co/text/002-environment-variables/</id>
    <updated>2024-04-05T00:00:00Z</updated>
    <published>2024-04-05T00:00:00Z</published>
    <summary>do you ever think about the environment? what it is, and also, what it isn&#39;t. convenience is good. convenience can be dangerous. we need to talk.</summary>
    <content type="html">
      &lt;p&gt;I&#39;ve been delivering different versions of this rant over the past decade to whomever was there to hear. And seeing as people are still not getting the point, as exemplified by projects like &lt;a href=&quot;https://github.com/dotenvx/dotenvx&quot;&gt;@dotenvx/dotenvx&lt;/a&gt;, &lt;a href=&quot;https://github.com/joho/godotenv&quot;&gt;joho/godotenv&lt;/a&gt;, or &lt;a href=&quot;https://github.com/theskumar/python-dotenv&quot;&gt;theskumar/python-dotenv&lt;/a&gt;, etc., it looks like it&#39;s time I get this down in written form.&lt;/p&gt;
&lt;p&gt;Then at least I can start linking people to here rather than having to repeat myself again. And again. And again.&lt;/p&gt;
&lt;h2 class=&quot;funky&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.env&lt;/code&gt; files are an implementation detail of &lt;em&gt;your&lt;/em&gt; environment. &lt;strong&gt;Nothing&lt;/strong&gt; in your project should care or know that &lt;code&gt;.env&lt;/code&gt; files exist. If you want to use &lt;code&gt;.env&lt;/code&gt; files, then you need to: 1/ Add &lt;code&gt;.env&lt;/code&gt; to your global &lt;code&gt;~/.gitignore&lt;/code&gt; file, and &lt;strong&gt;never&lt;/strong&gt; to a project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file. 2/ Configure &lt;strong&gt;your environment&lt;/strong&gt;, and &lt;strong&gt;not your project&lt;/strong&gt;, to load &lt;code&gt;.env&lt;/code&gt; files (for example, using &lt;a href=&quot;https://github.com/hyperupcall/autoenv&quot;&gt;hyperupcall/autoenv&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Variables of the Environment&lt;/h2&gt;
&lt;p&gt;As a developer, you get exposed to environment variables out of necessity. They are not usually a thing that you need to care about until the first time you encounter a tool or program that is sensitive to the environment, or that expects to get configured via environment variables. So you start digging. You see that your shell seems to have a set of variables. You can list them with &lt;code&gt;printenv&lt;/code&gt;. You recognize some of this stuff. You remember how some tools wanted you to add stuff to this &lt;code&gt;PATH&lt;/code&gt; variable, and you see the stuff you added. Other stuff seems alien, and you have no clue where it&#39;s coming from. You can print a variable with &lt;code&gt;echo $VARIABLE&lt;/code&gt;, so you figure you can use them in your shell scripts. You learn you can set new ones, and even pass additional variables to your shell scripts when you run them: &lt;code&gt;NEW_VAR=hello ./myscript.sh&lt;/code&gt;. You learn that these variables are accessible to all programs you run from your shell, not just other shell scripts. You learn that this whole &amp;quot;environment variables&amp;quot; thing is actually quite old, and supported across all major platforms.&lt;/p&gt;
&lt;p&gt;And before you know it, you have a new tool in your toolbox.&lt;/p&gt;
&lt;h2&gt;Prepare for trouble...&lt;/h2&gt;
&lt;p&gt;So you use it. You want your programs to be cool programs that can be configured via environment variables. You&#39;ve seen others do it: that&#39;s how you learned about environment variables in the first place. You learn about &lt;a href=&quot;https://12factor.net/config&quot;&gt;The Twelve-Factor App&lt;/a&gt;, and how &amp;quot;The twelve-factor app stores config in environment variables&amp;quot;, and you start passing all kinds of configuration to your application via environment variables.&lt;/p&gt;
&lt;p&gt;At this point I need to stop what I&#39;m doing and tell you: Please don&#39;t. Configuration files are a good thing. They exist for a good reason. If you expect different environments to place their configuration files at different locations, then it makes sense to configure &lt;em&gt;the path from where to load configuration files&lt;/em&gt; via environment variables. But I don&#39;t have time for that right now, there&#39;s more important things I want to get to.&lt;/p&gt;
&lt;p&gt;Regardless of whether it makes sense or not, the point is that by now you&#39;re writing applications that need to get configured via environment variables. So you need to set some environment variables. So far you&#39;ve seen how to pass values manually, and how to set them in your current shell, but you don&#39;t want to be doing this every time you&#39;re writing some code. There has to be a way to set environment variables once in a single place, and have them be available every time you open a new shell. And sure, there is, and you&#39;ve done this already: your shell&#39;s rc file (&lt;code&gt;~/.bashrc&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt;, etc.). But this feels... &lt;em&gt;wrong&lt;/em&gt;... right? It feels weird having to go and edit a global file with project-specific configuration. And if you ever need to provide two projects with different values for the same variable, you&#39;re shit out of luck.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There has to be a better way...&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;...and make it double&lt;/h2&gt;
&lt;p&gt;So you learn about &lt;code&gt;.env&lt;/code&gt; files. You find some convenient library for your either language of choice or JavaScript, add a couple of lines to your project, and that&#39;s it. It loads your &lt;code&gt;.env&lt;/code&gt; files and the rest just works. Don&#39;t forget to add your &lt;code&gt;.env&lt;/code&gt; to your project&#39;s &lt;code&gt;.gitignore&lt;/code&gt; file, you don&#39;t want to be committing any secrets, now, do you?&lt;/p&gt;
&lt;p&gt;Let&#39;s quickly recap what you just did: 1/ You externalized your application&#39;s configuration to environment variables. 2/ You&#39;ve introduced a convenient way to load a configuration file into your environment variables. Do you think you&#39;ll be strong enough to restrain yourself from using &lt;code&gt;.env&lt;/code&gt; files in prod? You won&#39;t. The alternative would most likely feel clunky in comparison. Why would you store your configuration somewhere else?&lt;/p&gt;
&lt;p&gt;Even if &lt;em&gt;you&lt;/em&gt; don&#39;t use a &lt;code&gt;.env&lt;/code&gt; file in production, you&#39;re going to want to be &lt;strong&gt;sure&lt;/strong&gt; that there is no &lt;code&gt;.env&lt;/code&gt; file there. Otherwise, you might end up in a situation where you&#39;re properly providing a value via environment variables, only to have this value overwritten by a &lt;code&gt;.env&lt;/code&gt; file that should not be there. And by this point it should be quite clear that what you&#39;ve done is reinvent configuration files, except you&#39;re restricting yourself to key-value pairs, and forcing your configuration through the &amp;quot;API&amp;quot; of environment variables for no good reason.&lt;/p&gt;
&lt;p&gt;In the process, you&#39;ve made your application no longer environment-agnostic. You&#39;ve made it aware of the specific details of your development environment, and potentially carried that into other environments.&lt;/p&gt;
&lt;h2&gt;Doing it the right way&lt;/h2&gt;
&lt;p&gt;I&#39;ve already mentioned that there are some inherent issues with (ab)using environment variables to configure your applications, and will pick this up again once we&#39;re done here, but let&#39;s not question that for the moment, and assume that you&#39;re using environment variables correctly, and still want a way to conveniently configure your local environment on a per-project level. &lt;code&gt;.env&lt;/code&gt; files can be great at that. You just gotta approach it correctly.&lt;/p&gt;
&lt;p&gt;This is going to be an implementation detail of your environment. Whatever you do, your application should not have to know or care.&lt;/p&gt;
&lt;h3&gt;Add &lt;code&gt;.env&lt;/code&gt; to your global &lt;code&gt;~/.gitignore&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;You don&#39;t want to commit &lt;code&gt;.env&lt;/code&gt; files, but you also don&#39;t want to configure this on a per-project basis. Ignore them globally and forget about them.&lt;/p&gt;
&lt;h3&gt;Source &lt;code&gt;.env&lt;/code&gt; files in your shell&lt;/h3&gt;
&lt;p&gt;You can load &lt;code&gt;.env&lt;/code&gt; files by sourcing them in your shell (&lt;code&gt;source .env&lt;/code&gt;). Even better, you can automate this process with the appropriate tooling. I use &lt;a href=&quot;https://github.com/hyperupcall/autoenv&quot;&gt;hyperupcall/autoenv&lt;/a&gt; to automatically load &lt;code&gt;.env&lt;/code&gt; files when changing directories.&lt;/p&gt;
&lt;p&gt;Congratulations! You&#39;re now using environment variables correctly. You have a convenient way of configuring your local environment, that does not propagate to other environments. If you want to provide values on a different environment, you&#39;ll need to follow that environment&#39;s best practices.&lt;/p&gt;
&lt;h2&gt;Please don&#39;t&lt;/h2&gt;
&lt;p&gt;While I have you here, a couple more things.&lt;/p&gt;
&lt;p&gt;You do know that environment variables are global to your process, right? Say you&#39;re a node developer. There&#39;s nothing that keeps code in &lt;code&gt;node_modules/nonsuspicious-library/index.js&lt;/code&gt; from peeking at &lt;code&gt;process.env.AWS_ACCESS_KEY_SECRET&lt;/code&gt;. You don&#39;t need to grant it permission. You won&#39;t get a notification. It just can. I assume you&#39;ve already considered this attack vector. Right?&lt;/p&gt;
&lt;p&gt;Also, you do know there&#39;s a world out there besides key=value pairs, right? If you find yourself doing stuff like &lt;code&gt;GALACTUS_SERVICE_HOSTNAME&lt;/code&gt;, &lt;code&gt;GALACTUS_SERVICE_PORT&lt;/code&gt;, &lt;code&gt;GALACTUS_SERVICE_VERSION&lt;/code&gt;, etc., you probably want to stop what you&#39;re doing and go define a configuration file.&lt;/p&gt;
&lt;p&gt;And please, &lt;strong&gt;please&lt;/strong&gt; don&#39;t do stuff like this. This is real code from a project that shall remain nameless:&lt;/p&gt;
&lt;pre class=&quot;shiki rose-pine-dawn&quot; style=&quot;background-color:#faf4ed;color:#575279&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;@unfortunate/developer&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;4.2.0&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;scripts&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;serve:dev&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;ELEVENTY_ENV=development eleventy --serve&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;serve:prod&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;ELEVENTY_ENV=production eleventy --serve&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;ELEVENTY_ENV=production eleventy&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;    &quot;&lt;/span&gt;&lt;span style=&quot;color:#56949F&quot;&gt;build:dev&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#797593&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#EA9D34&quot;&gt; &quot;ELEVENTY_ENV=development eleventy&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span style=&quot;color:#797593&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know this stuff looks super convenient, helpful, intuitive, innocent, you name it. But trust me, when you&#39;re running &lt;code&gt;ELEVENTY_ENV=development npm run build&lt;/code&gt; and you can&#39;t for the life of you figure out why &lt;code&gt;console.log(process.env.ELEVENTY_ENV)&lt;/code&gt; prints &lt;code&gt;&#39;production&#39;&lt;/code&gt;, you&#39;re going to want to have a word with whomever wrote those npm scripts.&lt;/p&gt;
&lt;h2&gt;Postscript&lt;/h2&gt;
&lt;p&gt;Environment variables are fine, as long as they are the right tool for the job. But for anything even slightly more complex than just a few strings or numbers, you really want to be looking at configuration files. It&#39;s 2024, let&#39;s be honest: you&#39;re containerizing and deploying this onto Kubernetes. You do know that Kubernetes lets you inject configuration and secrets into your containers, not only as environment variables, but also as files, right? You have no excuses here.&lt;/p&gt;
&lt;p&gt;Rant over.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Logarithmic age</title>
    <link href="https://causti.co/text/001-logarithmic-age/" />
    <link rel="alternate" type="text/html" href="https://causti.co/text/001-logarithmic-age/" />
    <id>https://causti.co/text/001-logarithmic-age/</id>
    <updated>2024-04-01T00:00:00Z</updated>
    <published>2024-04-01T00:00:00Z</published>
    <summary>time might be linear, but our subjective value of it isn&#39;t. how could life look if we measured things differently to reflect this? have I ever told you about logarithmic age?</summary>
    <content type="html">
      &lt;p&gt;Have I ever told you about &lt;a href=&quot;https://en.wikipedia.org/wiki/Logarithm&quot;&gt;logarithmic&lt;/a&gt; age? I don&#39;t remember exactly when I first came up with this idea, but the realization was that not all consecutive 365-day period in your life are comparably significant. Of course, we speak from the bias of being our current age, but I think we can all agree that the amount of shit you get done during days 7305 and 7670 of your life is significantly more than what you get done between days 2922 and 3287.&lt;/p&gt;
&lt;p&gt;Logarithmic age fixes this. Logarithm to the base 2, to be precise. Here&#39;s how it works: You take your boring old linear age, you calculate its &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_logarithm&quot;&gt;binary logarithm&lt;/a&gt;, and you take the &lt;a href=&quot;https://en.wikipedia.org/wiki/Floor_and_ceiling_functions&quot;&gt;ceiling&lt;/a&gt; of that number. That&#39;s your new age. Me? I recently turned 6. This year will last twice as long as the previous one. Which was twice as long as the previous one. &lt;em&gt;Which was twice as long...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What do these new numbers mean? We can take a look.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;log&lt;sub&gt;2&lt;/sub&gt; Age&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0 - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1 - 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2 - 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4 - 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8 - 16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16 - 32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;32 - 64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;64 - 128&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The first two years are the same, but then it starts to get interesting. Year two, you star to socialize. Year three is your early childhood. Year four is the core of your youth. Year five you&#39;re a young adult. Year six is the major part of your life. And finally year seven is when you retire and die. Every year you have twice as much time to accomplish things as the previous one. Every year puts you twice as close to the end of your life as the previous one.&lt;/p&gt;
&lt;p&gt;Me? I recently turned 6. Fuck.&lt;/p&gt;

    </content>
  </entry>
</feed>